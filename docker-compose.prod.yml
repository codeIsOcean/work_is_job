version: '3.8'

services:
  postgres_prod:
    image: postgres:15
    container_name: postgres_prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bot_prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bot_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prod_network

  redis_prod:
    image: redis:7
    container_name: redis_prod
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prod_network

  bot_prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: bot_prod
    env_file:
      - .env.prod
    environment:
      ENV_PATH: .env.prod
      PYTHONPATH: /app
    depends_on:
      postgres_prod:
        condition: service_healthy
      redis_prod:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - prod_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx для webhook и SSL
  nginx_prod:
    image: nginx:alpine
    container_name: nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bot_prod
    restart: unless-stopped
    networks:
      - prod_network

  # Backup сервис
  backup:
    image: postgres:15
    container_name: backup_prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bot_prod
    volumes:
      - ./backups:/backups
      - postgres_prod_data:/var/lib/postgresql/data:ro
    command: >
      sh -c "while true; do
        pg_dump -h postgres_prod -U postgres bot_prod > /backups/backup_$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name '*.sql' -mtime +30 -delete;
        sleep 86400;
      done"
    depends_on:
      - postgres_prod
    restart: unless-stopped
    networks:
      - prod_network

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  prod_network:
    driver: bridge
