name: Deploy Telegram Bot

on:
  push:
    branches:
      - main      # Продакшн деплой
      - test      # Тестовый деплой
      - dev       # Дев деплой
  pull_request:
    branches:
      - main
      - test

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        ENVIRONMENT: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bot_test
        REDIS_URL: redis://localhost:6379/0
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}
        LOG_CHANNEL_ID: ${{ secrets.TEST_LOG_CHANNEL_ID }}
        ADMIN_IDS: ${{ secrets.TEST_ADMIN_IDS }}
      run: |
        # Здесь можно добавить тесты
        echo "Running tests..."
        python -c "import bot; print('✅ Bot module imports successfully')"

  build-and-deploy-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=test-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to test server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.TEST_SERVER_HOST }}
        username: ${{ secrets.TEST_SERVER_USER }}
        key: ${{ secrets.TEST_SERVER_SSH_KEY }}
        script: |
          cd /opt/telegram-bot
          docker-compose -f docker-compose.test.yml down
          docker-compose -f docker-compose.test.yml pull
          docker-compose -f docker-compose.test.yml up -d
          docker system prune -f

  build-and-deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=prod-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/telegram-bot
          git pull origin main || echo "Git pull failed, continuing..."
          docker compose -f docker-compose.prod.yml pull || docker-compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml down || docker-compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d --build || docker-compose -f docker-compose.prod.yml up -d --build
          docker system prune -f
          echo "✅ Деплой завершен!"