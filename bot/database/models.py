from sqlalchemy import Column, Integer, String, BigInteger, ForeignKey, DateTime, Boolean, Index, UniqueConstraint
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()


# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(BigInteger, unique=True)
    username = Column(String, nullable=True)
    full_name = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    language_code = Column(String, nullable=True)
    is_bot = Column(Boolean, default=False)
    is_premium = Column(Boolean, default=False)
    added_to_attachment_menu = Column(Boolean, default=False)
    can_join_groups = Column(Boolean, default=True)
    can_read_all_group_messages = Column(Boolean, default=False)
    supports_inline_queries = Column(Boolean, default=False)
    can_connect_to_business = Column(Boolean, default=False)
    has_main_web_app = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    groups = relationship("Group", back_populates="creator", foreign_keys="Group.creator_user_id")
    added_groups = relationship("Group", back_populates="added_by", foreign_keys="Group.added_by_user_id")
    user_groups = relationship("UserGroup", back_populates="user", cascade="all, delete")


# üè† –ì—Ä—É–ø–ø—ã
class Group(Base):
    __tablename__ = "groups"

    id = Column(Integer, primary_key=True)
    chat_id = Column(BigInteger, unique=True, nullable=False)
    title = Column(String, nullable=False)
    creator_user_id = Column(BigInteger, ForeignKey("users.user_id", ondelete="SET NULL"), nullable=True)
    added_by_user_id = Column(BigInteger, ForeignKey("users.user_id", ondelete="SET NULL"), nullable=True)
    bot_id = Column(BigInteger, nullable=True)  # ID –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤

    creator = relationship("User", back_populates="groups", foreign_keys=[creator_user_id])
    added_by = relationship("User", back_populates="added_groups", foreign_keys=[added_by_user_id])
    user_groups = relationship("UserGroup", back_populates="group", cascade="all, delete")


# üîÅ –°–≤—è–∑—å –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º –º–µ–∂–¥—É User –∏ Group
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≥—Ä—É–ø–ø–æ–π
# –ö–æ–≥–¥–∞ –±–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É, –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É, —Å–æ–∑–¥–∞–≤–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
# –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å—å, —Å–≤—è–∑—ã–≤–∞—é—â—É—é –µ–≥–æ user_id —Å group_id –≥—Ä—É–ø–ø—ã. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã.
class UserGroup(Base):
    __tablename__ = "user_group"

    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, ForeignKey("users.user_id", ondelete="CASCADE"), nullable=False, index=True)
    group_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False, index=True)

    user = relationship("User", back_populates="user_groups")
    group = relationship("Group", back_populates="user_groups")

    __table_args__ = (
        Index('ix_user_group_unique', 'user_id', 'group_id', unique=True),
    )


# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏
class CaptchaSettings(Base):
    __tablename__ = "captcha_settings"

    group_id = Column(BigInteger, ForeignKey("groups.chat_id"), primary_key=True)
    is_enabled = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    # –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ 07.06.25 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ø—á–∏
    is_visual_enabled = Column(Boolean, default=False)

    group = relationship("Group")


# ‚úÖ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–ø—á—É
class CaptchaAnswer(Base):
    __tablename__ = "captcha_answers"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, index=True)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id"), index=True)
    answer = Column(String(50))
    expires_at = Column(DateTime, index=True)

    __table_args__ = (
        Index('idx_user_chat', 'user_id', 'chat_id'),
    )


# üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
class CaptchaMessageId(Base):
    __tablename__ = "captcha_message_ids"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, index=True)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id"), index=True)
    message_id = Column(BigInteger)
    expires_at = Column(DateTime, index=True)

    __table_args__ = (
        Index('idx_user_chat_msg', 'user_id', 'chat_id'),
    )


class TimeoutMessageId(Base):
    __tablename__ = "timeout_messages"

    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger)
    chat_id = Column(BigInteger)
    message_id = Column(BigInteger)
    created_at = Column(DateTime, default=datetime.utcnow)


class GroupUsers(Base):
    __tablename__ = 'group_users'

    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, ForeignKey("users.user_id", ondelete="CASCADE"), nullable=False)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False)
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    joined_at = Column(DateTime, default=datetime.utcnow)
    last_activity = Column(DateTime, default=datetime.utcnow)
    is_admin = Column(Boolean, default=False)
    is_creator = Column(Boolean, default=False)  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã
    can_view_admins = Column(Boolean, default=True)  # –ü—Ä–∞–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    user = relationship("User", backref="group_memberships")
    group = relationship("Group", backref="members")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞—Ä—ã user_id –∏ chat_id
    __table_args__ = (
        UniqueConstraint('user_id', 'chat_id', name='uix_user_chat'),
    )


# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º—É—Ç–∞ –∏ –ø—Ä.)
class ChatSettings(Base):
    __tablename__ = "chat_settings"

    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), primary_key=True)
    enable_photo_filter = Column(Boolean, default=False)
    admins_bypass_photo_filter = Column(Boolean, default=False)
    photo_filter_mute_minutes = Column(Integer, default=60)
    mute_new_members = Column(Boolean, default=False)
    auto_mute_scammers = Column(Boolean, default=True)  # –ê–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤
    global_mute_enabled = Column(Boolean, default=False)  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø

    group = relationship("Group")


# üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º—É—Ç—ã, –ø—Ä–∏—á–∏–Ω—ã, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)
class UserRestriction(Base):
    __tablename__ = "user_restrictions"

    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, nullable=False)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False)
    restriction_type = Column(String(50), nullable=False)  # mute, ban –∏ —Ç.–ø.
    reason = Column(String, nullable=True)
    expires_at = Column(DateTime, nullable=True)

    __table_args__ = (
        Index("ix_user_restriction_user_chat", "user_id", "chat_id"),
    )


# üé≠ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–∞–º–º–µ—Ä–æ–≤ –∏ –Ω–µ–ø—Ä–æ—à–µ–¥—à–∏—Ö –∫–∞–ø—á—É
class ScammerTracker(Base):
    __tablename__ = "scammer_tracker"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, nullable=False, index=True)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False, index=True)
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    
    # –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violation_type = Column(String(50), nullable=False)  # captcha_failed, spam, suspicious_behavior
    violation_count = Column(Integer, default=1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_scammer = Column(Boolean, default=False)  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∫–∞–º–º–µ—Ä–æ–º
    scammer_level = Column(Integer, default=0)  # –£—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–º–µ—Ä–∞ (0-5)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    first_violation_at = Column(DateTime, default=datetime.utcnow)
    last_violation_at = Column(DateTime, default=datetime.utcnow)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notes = Column(String, nullable=True)  # –ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_whitelisted = Column(Boolean, default=False)  # –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ

    group = relationship("Group")

    __table_args__ = (
        Index('idx_scammer_user_chat', 'user_id', 'chat_id'),
        Index('idx_scammer_level', 'scammer_level'),
        Index('idx_scammer_violation_type', 'violation_type'),
        UniqueConstraint('user_id', 'chat_id', name='uix_scammer_user_chat'),
    )


# ü§ñ –ü—Ä–∞–≤–∞ –±–æ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö
class BotPermissions(Base):
    __tablename__ = "bot_permissions"

    id = Column(Integer, primary_key=True)
    bot_id = Column(BigInteger, nullable=False)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False)
    can_manage_chat = Column(Boolean, default=False)
    can_delete_messages = Column(Boolean, default=False)
    can_restrict_members = Column(Boolean, default=False)
    can_promote_members = Column(Boolean, default=False)
    can_invite_users = Column(Boolean, default=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    group = relationship("Group")

    __table_args__ = (
        UniqueConstraint('bot_id', 'chat_id', name='uix_bot_chat'),
        Index("ix_bot_permissions_bot_chat", "bot_id", "chat_id"),
    )


# üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞
class VisualCaptcha(Base):
    __tablename__ = "visual_captcha"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, nullable=False, index=True)
    chat_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), nullable=False, index=True)
    answer = Column(String(10), nullable=False)  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    message_id = Column(BigInteger, nullable=True)  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
    expires_at = Column(DateTime, nullable=False, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)

    group = relationship("Group")

    __table_args__ = (
        Index('idx_visual_captcha_user_chat', 'user_id', 'chat_id'),
        Index('idx_visual_captcha_expires', 'expires_at'),
    )


# üì¢ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥—Ä—É–ø–ø
class GroupJournalChannel(Base):
    __tablename__ = "group_journal_channels"

    id = Column(Integer, primary_key=True)
    group_id = Column(BigInteger, ForeignKey("groups.chat_id", ondelete="CASCADE"), unique=True, nullable=False, index=True)
    journal_channel_id = Column(BigInteger, nullable=False)  # ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞
    journal_type = Column(String(20), default="channel")  # channel –∏–ª–∏ group
    journal_title = Column(String, nullable=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    is_active = Column(Boolean, default=True)
    linked_at = Column(DateTime, default=datetime.utcnow)
    linked_by_user_id = Column(BigInteger, nullable=True)  # –ö—Ç–æ –ø—Ä–∏–≤—è–∑–∞–ª
    last_event_at = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è

    group = relationship("Group")

    __table_args__ = (
        Index('ix_group_journal_group_id', 'group_id'),
        Index('ix_group_journal_channel_id', 'journal_channel_id'),
    )