from calendar import error

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from bot.services.groups_settings_in_private_logic import (
    get_admin_groups,
    check_admin_rights,
    check_granular_permissions,
    get_group_by_chat_id,
    get_visual_captcha_status,
    toggle_visual_captcha,
    get_mute_new_members_status
)
from bot.middleware.access_control import (
    ACCESS_CONTROL_ENABLED,
    enable_access_control,
    disable_access_control,
    ALLOWED_USER_IDS,
    ALLOWED_USERNAMES,
)
from bot.services.bot_activity_journal.bot_activity_journal_logic import log_visual_captcha_toggle, log_mute_settings_toggle
from bot.services.new_member_requested_to_join_mute_logic import (
    create_mute_settings_keyboard,
    get_mute_settings_text
)
import logging

logger = logging.getLogger(__name__)
group_settings_router = Router()


@group_settings_router.message(Command("settings"))
async def settings_command(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ø–æ ID –∏–ª–∏ username –∏–∑ –µ–¥–∏–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    username_norm = (message.from_user.username or "").lstrip("@").lower()
    if (user_id not in ALLOWED_USER_IDS) and (username_norm not in ALLOWED_USERNAMES):
        await message.answer(
            "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –≤–∞–º –¥–∞—Ç—å –ø—Ä–∞–≤–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @texas_dev –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="HTML"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_groups = await get_admin_groups(user_id, session, bot=message.bot)

        if not user_groups:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        keyboard = create_groups_keyboard(user_groups)

        text = "üè† **–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /settings: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")


@group_settings_router.message(Command("bot_access"))
async def bot_access_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot_access - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /bot_access –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id != 619924982:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
        keyboard = create_access_control_keyboard()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        from bot.middleware.access_control import ACCESS_CONTROL_ENABLED
        status_text = "üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω</b> (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)" if ACCESS_CONTROL_ENABLED else "üîì <b>–û—Ç–∫—Ä—ã—Ç</b> (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
        
        text = (
            f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:"
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /bot_access: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /start —É–±—Ä–∞–Ω–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ visual_captcha_handler –¥–ª—è deep links


@group_settings_router.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_id = message.from_user.id
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = (
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if user_id == 619924982:
        text += (
            "üîß <b>–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:</b>\n"
            "‚Ä¢ /bot_access - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\n\n"
        )
    
    text += (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞\n"
        "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings"
    )
    
    await message.answer(text, parse_mode="HTML")


@group_settings_router.callback_query(F.data.startswith("manage_group_"))
async def manage_group_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    logger.info(f"üîç [GROUP_SETTINGS] ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ó–í–ê–ù =====")
    logger.info(f"üîç [GROUP_SETTINGS] Callback data: {callback.data}")
    logger.info(f"üîç [GROUP_SETTINGS] User ID: {callback.from_user.id}")
    logger.info(f"üîç [GROUP_SETTINGS] User: @{callback.from_user.username or callback.from_user.first_name}")
    
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        logger.info(f"üîç [GROUP_SETTINGS] Parsed chat_id: {chat_id}, user_id: {user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = await get_group_by_chat_id(session, chat_id)
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π
        await send_group_management_menu(callback.message, session, group)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π: {e}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ new_member_requested_to_join_mute_handlers.py


@group_settings_router.callback_query(F.data.startswith("toggle_visual_captcha_"))
async def toggle_visual_captcha_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏"""
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç can_change_info
        if not await check_granular_permissions(callback.bot, user_id, chat_id, 'change_info', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–ò–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ'", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        new_status = await toggle_visual_captcha(session, chat_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ Telegram API
            chat_info = await callback.bot.get_chat(chat_id)
            await log_visual_captcha_toggle(
                bot=callback.bot,
                user=callback.from_user,
                chat=chat_info,
                enabled=new_status
            )
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {log_error}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        group = await get_group_by_chat_id(session, chat_id)
        keyboard = await create_group_management_keyboard(session, chat_id)

        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer(f"‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ {status_text}", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members_settings_"))
async def mute_new_members_settings_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç can_restrict_members
        if not await check_granular_permissions(callback.bot, user_id, chat_id, 'restrict_members', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_data = await create_mute_settings_keyboard(chat_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                for btn in row
            ]
            for row in keyboard_data["buttons"]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
        from bot.services.groups_settings_in_private_logic import get_global_mute_status
        global_mute_status = await get_global_mute_status(session)
        message_text = await get_mute_settings_text(status=keyboard_data["status"], global_mute=global_mute_status)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members:enable:"))
async def enable_mute_new_members_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split(":")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç can_restrict_members
        if not await check_granular_permissions(callback.bot, user_id, chat_id, 'restrict_members', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'", show_alert=True)
            return

        # –í–∫–ª—é—á–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        from bot.services.new_member_requested_to_join_mute_logic import set_mute_new_members_status
        success = await set_mute_new_members_status(chat_id, True, session)
        
        if success:
            await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –≤ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ Telegram API
                chat_info = await callback.bot.get_chat(chat_id)
                await log_mute_settings_toggle(
                    bot=callback.bot,
                    user=callback.from_user,
                    chat=chat_info,
                    enabled=True
                )
            except Exception as log_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞: {log_error}")

            # üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            keyboard_data = await create_mute_settings_keyboard(chat_id, session)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                    for btn in row
                ]
                for row in keyboard_data["buttons"]
            ])

            message_text = await get_mute_settings_text(status=keyboard_data["status"])

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )


        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members:disable:"))
async def disable_mute_new_members_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split(":")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç can_restrict_members
        if not await check_granular_permissions(callback.bot, user_id, chat_id, 'restrict_members', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'", show_alert=True)
            return

        # –í—ã–∫–ª—é—á–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        from bot.services.new_member_requested_to_join_mute_logic import set_mute_new_members_status
        success = await set_mute_new_members_status(chat_id, False, session)
        
        if success:
            await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞")

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –≤ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ Telegram API
                chat_info = await callback.bot.get_chat(chat_id)
                await log_mute_settings_toggle(
                    bot=callback.bot,
                    user=callback.from_user,
                    chat=chat_info,
                    enabled=False
                )
            except Exception as log_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞: {log_error}")

            # üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            keyboard_data = await create_mute_settings_keyboard(chat_id, session)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                    for btn in row
                ]
                for row in keyboard_data["buttons"]
            ])

            message_text = await get_mute_settings_text(status=keyboard_data["status"])

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data == "back_to_groups")
async def back_to_groups_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    user_id = callback.from_user.id
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_groups = await get_admin_groups(user_id, session, bot=callback.bot)

        if not user_groups:
            await callback.message.edit_text(" ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç")
            return
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        keyboard = create_groups_keyboard(user_groups)

        text = "üè† ** –í–∞—à–∏ –≥—Ä—É–ø–ø—ã: **\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–π –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")
    await callback.answer()


    # # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É settings
    # await settings_command(callback.message, session)
    # await callback.answer()


def create_groups_keyboard(groups):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø —Å callback –∫–Ω–æ–ø–∫–∞–º–∏"""
    logger.info(f"üîç [GROUP_SETTINGS] ===== –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ =====")
    logger.info(f"üîç [GROUP_SETTINGS] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(groups)}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
    global_mute_button = InlineKeyboardButton(
        text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        callback_data="global_mute_settings"
    )
    keyboard.inline_keyboard.append([global_mute_button])
    logger.info(f"üîç [GROUP_SETTINGS] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞")

    for group in groups:
        callback_data = f"manage_group_{group.chat_id}"
        button = InlineKeyboardButton(
            text=f"‚öôÔ∏è {group.title}",
            callback_data=callback_data
        )
        keyboard.inline_keyboard.append([button])
        logger.info(f"üîç [GROUP_SETTINGS] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: '{group.title}' -> '{callback_data}'")

    logger.info(f"üîç [GROUP_SETTINGS] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(keyboard.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
    return keyboard


async def send_group_management_menu(message: types.Message, session: AsyncSession, group):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ –≤ Redis
    from bot.services.redis_conn import redis
    user_id = message.from_user.id
    group_id = str(group.chat_id)
    
    logger.info(f"üîç [GROUP_SETTINGS] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫ –≥—Ä—É–ø–ø–µ {group_id}")
    
    await redis.hset(f"user:{user_id}", "group_id", group_id)
    # TTL –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (30 –º–∏–Ω—É—Ç)
    await redis.expire(f"user:{user_id}", 30 * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    saved_group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.info(f"üîç [GROUP_SETTINGS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: user:{user_id} -> group_id: {saved_group_id}")
    
    if saved_group_id != group_id:
        logger.error(f"‚ùå [GROUP_SETTINGS] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å group_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        logger.info(f"‚úÖ [GROUP_SETTINGS] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫ –≥—Ä—É–ø–ø–µ {group_id}")
    
    text = f"**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π**\n\n"
    text += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {group.title}\n"
    text += f"**ID:** `{group.chat_id}`\n\n"
    text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**"

    keyboard = await create_group_management_keyboard(session, group.chat_id)

    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


async def create_group_management_keyboard(session: AsyncSession, chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    visual_captcha_status = await get_visual_captcha_status(session, chat_id)
    visual_captcha_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É" if visual_captcha_status else "üü¢ –í–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–π)
    mute_status = await get_mute_new_members_status(session, chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
    from bot.services.groups_settings_in_private_logic import get_global_mute_status
    global_mute_status = await get_global_mute_status(session)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –ò–õ–ò –ª–æ–∫–∞–ª—å–Ω—ã–π)
    overall_mute_status = global_mute_status or mute_status
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
    if global_mute_status:
        mute_text = "üîá –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üåç (–≥–ª–æ–±–∞–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω)"
    elif mute_status:
        mute_text = "üîá –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚úÖ (–ª–æ–∫–∞–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω)"
    else:
        mute_text = "üîá –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ùå (–≤—ã–∫–ª—é—á–µ–Ω)"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤
    from bot.services.auto_mute_scammers_logic import get_auto_mute_scammers_status
    auto_mute_status = await get_auto_mute_scammers_status(chat_id, session)
    auto_mute_text = "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=visual_captcha_text,
            callback_data=f"toggle_visual_captcha_{chat_id}"
        )],
        [InlineKeyboardButton(
            text=mute_text,
            callback_data=f"new_member_requested_handler_settings:{chat_id}"
        )],
        [InlineKeyboardButton(
            text=auto_mute_text,
            callback_data=f"auto_mute_scammers_settings:{chat_id}"
        )],
        [InlineKeyboardButton(
            text="üì¢ –†–∞—Å—Å—ã–ª–∫–∏",
            callback_data="broadcast_settings"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø",
            callback_data="back_to_groups"
        )]
    ])

    return keyboard


def create_access_control_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîí –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
                    callback_data="access_control_restricted"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîì –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="access_control_open"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å",
                    callback_data="access_control_status"
                )
            ]
        ]
    )
    return keyboard


@group_settings_router.callback_query(F.data.startswith("access_control_"))
async def access_control_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if user_id != 619924982:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        action = callback.data.split("_")[-1]
        
        if action == "restricted":
            enable_access_control()
            status_text = "üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω</b> (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"
            await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
            
        elif action == "open":
            disable_access_control()
            status_text = "üîì <b>–û—Ç–∫—Ä—ã—Ç</b> (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
            await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            
        elif action == "status":
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            from bot.middleware.access_control import ACCESS_CONTROL_ENABLED
            current_status = "üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω</b> (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)" if ACCESS_CONTROL_ENABLED else "üîì <b>–û—Ç–∫—Ä—ã—Ç</b> (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
            await callback.answer(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        text = (
            f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:"
        )
        
        keyboard = create_access_control_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–æ—Å—Ç—É–ø–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data == "global_mute_settings")
async def global_mute_settings_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from bot.config import ADMIN_IDS
        if user_id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
        from bot.services.groups_settings_in_private_logic import get_global_mute_status
        current_status = await get_global_mute_status(session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º—É—Ç–æ–º
        keyboard = create_global_mute_keyboard(current_status)
        
        status_text = "üü¢ –í–∫–ª—é—á–µ–Ω" if current_status else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        text = (
            f"üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç.\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö."
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("toggle_global_mute_"))
async def toggle_global_mute_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from bot.config import ADMIN_IDS
        if user_id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
        from bot.services.groups_settings_in_private_logic import toggle_global_mute
        new_status = await toggle_global_mute(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_global_mute_keyboard(new_status)
        
        status_text = "üü¢ –í–∫–ª—é—á–µ–Ω" if new_status else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        text = (
            f"üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç.\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö."
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
        action_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        await callback.answer(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç {action_text}", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


def create_global_mute_keyboard(current_status: bool):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º—É—Ç–æ–º"""
    toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç" if current_status else "üü¢ –í–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç"
    toggle_action = "off" if current_status else "on"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=toggle_text,
            callback_data=f"toggle_global_mute_{toggle_action}"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø",
            callback_data="back_to_groups"
        )]
    ])
    
    return keyboard
