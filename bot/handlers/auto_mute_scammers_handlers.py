# handlers/auto_mute_scammers_handlers.py
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter
from aiogram.enums import ChatMemberStatus

from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.auto_mute_scammers_logic import (
    get_auto_mute_scammers_status,
    set_auto_mute_scammers_status,
    auto_mute_scammer_on_join,
    create_auto_mute_settings_keyboard,
    get_auto_mute_settings_text
)
from bot.services.groups_settings_in_private_logic import check_granular_permissions
from bot.services.redis_conn import redis
from bot.database.session import get_session

logger = logging.getLogger(__name__)

auto_mute_scammers_router = Router()


@auto_mute_scammers_router.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(ChatMemberStatus.LEFT, ChatMemberStatus.MEMBER)
    )
)
async def handle_chat_member_update(event: ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤
    """
    logger.info(f"üîç [AUTO_MUTE_HANDLER] ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–ú–£–¢–ê –°–†–ê–ë–û–¢–ê–õ =====")
    logger.info(f"üîç [AUTO_MUTE_HANDLER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{event.new_chat_member.user.username or event.new_chat_member.user.first_name or event.new_chat_member.user.id} [{event.new_chat_member.user.id}]")
    logger.info(f"üîç [AUTO_MUTE_HANDLER] –ß–∞—Ç: {event.chat.title} [{event.chat.id}]")
    logger.info(f"üîç [AUTO_MUTE_HANDLER] –°—Ç–∞—Ç—É—Å: {event.old_chat_member.status} -> {event.new_chat_member.status}")
    
    try:
        logger.info(f"üîç [AUTO_MUTE_HANDLER] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ–º—É—Ç–∞...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º—É—Ç –∏ —Ä—É—á–Ω–æ–π –º—É—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
        # –ê–≤—Ç–æ–º—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —É—Ä–æ–≤–Ω—é —Å–∫–∞–º–∞
        # –†—É—á–Ω–æ–π –º—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
        # –û–Ω–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        
        chat_id = event.chat.id
        user_id = event.new_chat_member.user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        captcha_key = f"captcha_passed:{user_id}:{chat_id}"
        captcha_passed = await redis.get(captcha_key)
        logger.info(f"üîç [AUTO_MUTE_HANDLER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {captcha_passed}")
        
        await auto_mute_scammer_on_join(event.bot, event)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ chat_member –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞: {e}")


@auto_mute_scammers_router.callback_query(F.data.startswith("auto_mute_settings:"))
async def handle_auto_mute_settings(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤"""
    try:
        parts = callback.data.split(":")
        if len(parts) < 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        action = parts[1]  # enable –∏–ª–∏ disable
        chat_id = int(parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–µ—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç can_restrict_members
        user_id = callback.from_user.id
        if not await check_granular_permissions(callback.bot, user_id, chat_id, 'restrict_members', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        enabled = action == "enable"
        success = await set_auto_mute_scammers_status(chat_id, enabled, session)
        
        if success:
            status_message = "–ê–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω" if enabled else "–ê–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(status_message, show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            keyboard_data = await create_auto_mute_settings_keyboard(chat_id, session)
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                    for btn in row
                ]
                for row in keyboard_data["buttons"]
            ])
            
            text = get_auto_mute_settings_text(keyboard_data["status"])
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@auto_mute_scammers_router.callback_query(F.data.startswith("auto_mute_scammers_settings:"))
async def show_auto_mute_settings(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ callback_data
        if callback.data.startswith("auto_mute_scammers_settings:"):
            group_id = int(callback.data.split(":")[-1])
        else:
            # Fallback - –ø–æ–ª—É—á–∞–µ–º –∏–∑ Redis
            group_id = await redis.hget(f"user:{user_id}", "group_id")
            if not group_id:
                group_id = await redis.get(f"current_group_for_user:{user_id}")
                if not group_id:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", show_alert=True)
                    return
            group_id = int(group_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç can_restrict_members
        if not await check_granular_permissions(callback.bot, user_id, group_id, 'restrict_members', session):
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –ø—Ä–∞–≤–æ '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        auto_mute_enabled = await get_auto_mute_scammers_status(group_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_data = await create_auto_mute_settings_keyboard(group_id, session)
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                for btn in row
            ]
            for row in keyboard_data["buttons"]
        ])
        
        text = get_auto_mute_settings_text(auto_mute_enabled)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@auto_mute_scammers_router.message(Command("auto_mute_status"))
async def check_auto_mute_status(message, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤"""
    try:
        if message.chat.type not in ("group", "supergroup"):
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            return

        chat_id = message.chat.id
        auto_mute_enabled = await get_auto_mute_scammers_status(chat_id, session)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω" if auto_mute_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        await message.answer(f"ü§ñ –ê–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤: {status_text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º—É—Ç–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
