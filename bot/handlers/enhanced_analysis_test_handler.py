"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∏–æ
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from bot.services.enhanced_profile_analyzer import enhanced_profile_analyzer
from bot.services.account_age_estimator import account_age_estimator
from bot.services.bio_content_analyzer import bio_analyzer

logger = logging.getLogger(__name__)
enhanced_analysis_router = Router()

@enhanced_analysis_router.message(Command("test_analysis"))
async def test_enhanced_analysis(message: Message, bot: Bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        user_data = {
            "id": user_id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "is_bot": message.from_user.is_bot,
            "is_premium": getattr(message.from_user, 'is_premium', False)
        }
        
        await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è...")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        age_info = account_age_estimator.get_detailed_age_info(user_id)
        
        # –ê–Ω–∞–ª–∏–∑ –±–∏–æ
        bio_text = "–¢–µ—Å—Ç–æ–≤–æ–µ –±–∏–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"
        bio_analysis = bio_analyzer.analyze_bio_content(bio_text)
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        full_analysis = await enhanced_profile_analyzer.analyze_user_profile_enhanced(user_data, bot)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_data['first_name']} (@{user_data['username']})
üÜî **ID:** {user_id}

üìÖ **–ê–ù–ê–õ–ò–ó –í–û–ó–†–ê–°–¢–ê –ê–ö–ö–ê–£–ù–¢–ê:**
‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {age_info['creation_date_str']}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age_info['age_days']} –¥–Ω–µ–π
‚Ä¢ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {age_info['risk_score']}/100 ({age_info['risk_label']})
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {age_info['risk_description']}

üìù **–ê–ù–ê–õ–ò–ó –ë–ò–û:**
‚Ä¢ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {bio_analysis['risk_score']}/100
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {bio_analysis['is_suspicious']}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(bio_analysis['categories']) if bio_analysis['categories'] else '–ù–µ—Ç'}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {bio_analysis['reason']}

üéØ **–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:**
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª —Ä–∏—Å–∫–∞: {full_analysis['risk_score']}/100
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {full_analysis['is_suspicious']}
‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(full_analysis['reasons']) if full_analysis['reasons'] else '–ù–µ—Ç'}
        """
        
        await message.answer(report, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

@enhanced_analysis_router.message(Command("test_bio"))
async def test_bio_analysis(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–∏–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        bio_text = message.text.replace("/test_bio", "").strip()
        
        if not bio_text:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–∏–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n–ü—Ä–∏–º–µ—Ä: /test_bio –ø—Ä–æ–¥–∞–º –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–æ
        analysis = bio_analyzer.analyze_bio_content(bio_text)
        
        report = f"""
üìù **–ê–ù–ê–õ–ò–ó –ë–ò–û:**

**–¢–µ–∫—Å—Ç:** {bio_text}

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {analysis['risk_score']}/100
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {analysis['is_suspicious']}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(analysis['categories']) if analysis['categories'] else '–ù–µ—Ç'}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {analysis['reason']}

**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**
{chr(10).join(f"‚Ä¢ {pattern}" for pattern in analysis['matched_patterns']) if analysis['matched_patterns'] else "‚Ä¢ –ù–µ—Ç"}
        """
        
        await message.answer(report, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∏–æ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∏–æ: {e}")

@enhanced_analysis_router.message(Command("test_age"))
async def test_age_analysis(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age_info = account_age_estimator.get_detailed_age_info(user_id)
        
        report = f"""
üìÖ **–ê–ù–ê–õ–ò–ó –í–û–ó–†–ê–°–¢–ê –ê–ö–ö–ê–£–ù–¢–ê:**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {message.from_user.first_name} (@{message.from_user.username})
**ID:** {user_id}

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {age_info['creation_date_str']}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age_info['age_days']} –¥–Ω–µ–π
‚Ä¢ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {age_info['risk_score']}/100
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {age_info['risk_label']}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {age_info['risk_description']}
        """
        
        await message.answer(report, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
