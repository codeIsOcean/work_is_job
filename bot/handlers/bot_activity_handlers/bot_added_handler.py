# bot/handlers/bot_activity_handlers/bot_added_handler.py
import logging
from typing import Optional

from aiogram import Router, Bot, F
from aiogram.enums import ChatMemberStatus, UpdateType, ChatType
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter
from aiogram.types import (
    ChatMemberUpdated,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
)
from sqlalchemy.ext.asyncio import AsyncSession 

from bot.services.bot_added_handler_logic import (
    sync_group_and_admins,
    is_user_group_admin,
    build_private_chat_link,
    safe_send
)
from bot.services.bot_activity_journal.bot_activity_journal_logic import log_bot_added_to_group

logger = logging.getLogger(__name__)

bot_added_router = Router(name="bot_added_router")


def _settings_keyboard(chat_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å",
                    callback_data=f"settings_here:{chat_id}",
                ),
                InlineKeyboardButton(
                    text="üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ª–∏—á–∫–µ",
                    callback_data=f"settings_pm:{chat_id}",
                ),
            ]
        ]
    )


def _go_to_pm_keyboard(bot_username: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É –≤ –õ–°.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot_username –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if not bot_username:
        # –ï—Å–ª–∏ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data –≤–º–µ—Å—Ç–æ url
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫–æ –º–Ω–µ –≤ –õ–°",
                        callback_data="go_to_pm_fallback",
                    )
                ]
            ]
        )
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫–æ –º–Ω–µ –≤ –õ–°",
                    url=f"https://t.me/{bot_username}",
                )
            ]
        ]
    )


# =======================================
# –û–ë–†–ê–ë–û–¢–ö–ê –°–ú–ï–ù–´ –°–¢–ê–¢–£–°–ê –°–ê–ú–û–ì–û –ë–û–¢–ê
# =======================================
@bot_added_router.my_chat_member() 
async def on_my_status_change(
        event: ChatMemberUpdated,
        bot: Bot,
        session: AsyncSession,
):
    """
    –†–µ–∞–≥–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –ò–ú–ï–ù–ù–û –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (my_chat_member).
    """
    print("üõ† –•–µ–Ω–¥–ª–µ—Ä my_chat_member —Å—Ä–∞–±–æ—Ç–∞–ª")
    print(f"üì• –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {event.new_chat_member.status}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å member –∏–ª–∏ administrator
    if event.new_chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.MEMBER]:
        print("‚õîÔ∏è –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return

    chat = event.chat
    chat_id = chat.id
    chat_title = getattr(chat, "title", str(chat.id))
    bot_info = await bot.me()

    logger.info(f"[BOT_ADDED] chat='{chat_title}' id={chat_id} status={event.new_chat_member.status}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if event.from_user is None and event.sender_chat:
            print("‚ö°Ô∏è –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif event.from_user:
            user = event.from_user
            print(f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name} (ID: {user.id})")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if event.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –∏ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
            await sync_group_and_admins(chat_id, chat_title, bot_info.id, bot)
            text = "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –¥–æ–±–∞–≤–ª–µ–Ω **—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**.\n\n–ì–¥–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏?"
            reply_markup = _settings_keyboard(chat_id)
        else:  # MEMBER
            text = ("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É! üéâ\n\n"
                    "–ß—Ç–æ–±—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ (–∫–∞–ø—á–∞, –∞–Ω—Ç–∏—Å–ø–∞–º –∏ –¥—Ä.), "
                    "–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**.")
            reply_markup = None

        await safe_send(bot, chat_id, text, reply_markup=reply_markup)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∂—É—Ä–Ω–∞–ª–∞
        try:
            await log_bot_added_to_group(
                bot=bot,
                chat=chat,
                added_by=event.from_user
            )
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {log_error}")

    except Exception:
        logger.exception("[BOT_ADDED_HANDLER_FAIL]")
        await session.rollback()


# =======================================
# CALLBACK: "–ù–ê–°–¢–†–û–ò–¢–¨ –ó–î–ï–°–¨" / "–í –õ–ò–ß–ö–ï"
# =======================================
@bot_added_router.callback_query(F.data.startswith("settings_here:"))
async def on_settings_here(
    cq: CallbackQuery,
    bot: Bot,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å".
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–º—ë—Ç –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã.
    """
    if not cq.message:
        await cq.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    chat_id_str = cq.data.split(":", 1)[1]
    try:
        chat_id = int(chat_id_str)
    except ValueError:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if cq.message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await cq.answer("–≠—Ç—É –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ.", show_alert=True)
        return

    user_id = cq.from_user.id
    if not await is_user_group_admin(bot, chat_id, user_id):
        await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert=True)
        return

    await cq.answer()
    await safe_send(
        bot,
        chat_id,
        "‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å:\n"
        "‚Ä¢ –ö–∞–ø—á–∞: –í–∫–ª/–í—ã–∫–ª\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫: –í–∫–ª/–í—ã–∫–ª\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä NSFW: –í–∫–ª/–í—ã–∫–ª\n"
        "‚Ä¢ –ú—É—Ç/–ë–∞–Ω –∫–æ–º–∞–Ω–¥—ã: –í–∫–ª/–í—ã–∫–ª\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ–Ω—é‚Ä¶"
    )


@bot_added_router.callback_query(F.data.startswith("settings_pm:"))
async def on_settings_pm(
    cq: CallbackQuery,
    bot: Bot,
    session: AsyncSession,
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ª–∏—á–∫–µ":
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞
    - –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°
    - –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–ª–∞–Ω—ã –≤ –ª–∏—á–∫—É
    """

    
    if not cq.message:
        await cq.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    chat_id_str = cq.data.split(":", 1)[1]
    try:
        chat_id = int(chat_id_str)
    except ValueError:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    user = cq.from_user
    user_id = user.id

    if not await is_user_group_admin(bot, chat_id, user_id):
        await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert=True)
        return

    await cq.answer()

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –õ–°
    linked = await build_private_chat_link(bot)
    pm_ok = False
    try:
        await safe_send(
            bot,
            user_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∑–¥–µ—Å—å, –≤ –ª–∏—á–∫–µ.\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:\n"
            "‚Ä¢ –ö–∞–ø—á–∞ (–≤–∏–∑—É–∞–ª—å–Ω–∞—è/–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫/–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
            "‚Ä¢ –§–æ—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã mute/ban –∏ –∏—Ö —à–∞–±–ª–æ–Ω—ã\n\n"
            "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, —Å–Ω–∞—á–∞–ª–∞ **–Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É**.",
        )
        pm_ok = True
    except Exception:
        logger.exception(f"[PM_SEND_FAIL] user_id={user_id}")

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    bot_info = await bot.me()
    bot_username = bot_info.username

    # –û—Ç–≤–µ—á–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ: –ø–æ–ª—É—á–∏–ª–æ—Å—å/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    if pm_ok and bot_username:
        await safe_send(
            bot,
            chat_id,
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–ª–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.full_name} –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=_go_to_pm_keyboard(bot_username)
        )
    elif bot_username:
        # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°, –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å username)
        tail = f"\n\n–û—Ç–∫—Ä–æ–π –±–æ—Ç–∞: {linked}" if linked else ""
        await safe_send(
            bot,
            chat_id,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.full_name}."
            f"{tail}\n–ù–∞–ø–∏—à–∏ –±–æ—Ç—É /start –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=_go_to_pm_keyboard(bot_username)
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç username —É –±–æ—Ç–∞
        await safe_send(
            bot,
            chat_id,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.full_name}.\n"
            f"–ù–∞–π–¥–∏ –±–æ—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–∞–ø–∏—à–∏ –µ–º—É /start.",
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è fallback callback-–∑–∞–ø—Ä–æ—Å–∞
@bot_added_router.callback_query(F.data == "go_to_pm_fallback")
async def handle_go_to_pm_fallback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è fallback –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–°"""
    await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start", show_alert=True)
