# group_events.py
import logging
from aiogram import Router, types
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import ChatJoinRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete

from bot.database.models import Group, User, GroupUsers, UserGroup
from bot.services.visual_captcha_logic import (
    get_visual_captcha_status,
    generate_visual_captcha,
    save_captcha_data,
    create_deeplink_for_captcha,
    get_captcha_keyboard,
    is_visual_captcha_enabled
)

logger = logging.getLogger(__name__)

group_events_router = Router()
bot_activity_handlers_router = group_events_router  # –ê–ª–∏–∞—Å –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –≥—Ä—É–ø–ø—ã


@group_events_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> IS_MEMBER))
async def bot_added_to_group(event: types.ChatMemberUpdated, session: AsyncSession):
    chat = event.chat
    user = event.from_user

    logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat.title} (ID: {chat.id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name} (ID: {user.id})")

    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.user_id == user.id))
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(user_id=user.id, username=user.username, full_name=user.full_name)
            session.add(db_user)
            await session.flush()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        result = await session.execute(select(Group).where(Group.chat_id == chat.id))
        group = result.scalar_one_or_none()

        if not group:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            creator_id = None
            admins = await event.bot.get_chat_administrators(chat.id)

            for admin in admins:
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                result = await session.execute(select(User).where(User.user_id == admin.user.id))
                db_admin = result.scalar_one_or_none()
                if not db_admin:
                    db_admin = User(
                        user_id=admin.user.id,
                        username=admin.user.username,
                        full_name=admin.user.full_name
                    )
                    session.add(db_admin)

            await session.flush()

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            for admin in admins:
                if admin.status == "creator":
                    creator_id = admin.user.id
                    break

            group = Group(
                chat_id=chat.id,
                title=chat.title,
                creator_user_id=creator_id,
                added_by_user_id=user.id
            )
            session.add(group)
            await session.flush()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {chat.title}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ GroupUsers –∏ UserGroup
            for admin in admins:
                session.add(GroupUsers(
                    user_id=admin.user.id,
                    chat_id=chat.id,
                    username=admin.user.username,
                    first_name=admin.user.first_name,
                    last_name=admin.user.last_name,
                    is_admin=True
                ))
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ UserGroup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
                session.add(UserGroup(
                    user_id=admin.user.id,
                    group_id=chat.id
                ))
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.user.full_name} (ID: {admin.user.id})")

        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            group.title = chat.title
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: {chat.title}")

        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤—à–µ–≥–æ –±–æ—Ç–∞, –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ User
        result = await session.execute(select(User).where(User.user_id == user.id))
        db_user_who_added = result.scalar_one_or_none()
        if not db_user_who_added:
            db_user_who_added = User(
                user_id=user.id,
                username=user.username,
                full_name=user.full_name,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(db_user_who_added)
            await session.flush()
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –≤ GroupUsers
        result = await session.execute(select(GroupUsers).where(
            GroupUsers.chat_id == chat.id,
            GroupUsers.user_id == user.id
        ))
        if not result.scalar_one_or_none():
            session.add(GroupUsers(
                chat_id=chat.id,
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=True
            ))
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–∏–≤—à–∏–π –±–æ—Ç–∞: {user.full_name}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ UserGroup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        result = await session.execute(select(UserGroup).where(
            UserGroup.user_id == user.id,
            UserGroup.group_id == chat.id
        ))
        if not result.scalar_one_or_none():
            session.add(UserGroup(
                user_id=user.id,
                group_id=chat.id
            ))
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ UserGroup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {user.full_name}")

        await session.commit()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {chat.title} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await session.rollback()
        raise


@group_events_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_MEMBER >> IS_NOT_MEMBER))
async def bot_removed_from_group(event: types.ChatMemberUpdated, session: AsyncSession):
    """–£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏ —Å–≤—è–∑–∏, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —É–¥–∞–ª—è—é—Ç –∏–∑ –≥—Ä—É–ø–ø—ã."""
    chat = event.chat
    user = event.from_user

    logger.info(
        f"üóëÔ∏è –ë–æ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat.title} (ID: {chat.id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name} (ID: {user.id})"
    )

    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ UserGroup –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        await session.execute(
            delete(UserGroup).where(UserGroup.group_id == chat.id)
        )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã (GroupUsers) –ø–æ on delete CASCADE —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å,
        # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º–æ–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å —è–≤–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: –æ—Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —á–∏—Å—Ç–∫—É –≥—Ä—É–ø–ø–æ–π

        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = await session.execute(select(Group).where(Group.chat_id == chat.id))
        group = result.scalar_one_or_none()
        if group:
            await session.delete(group)

        await session.commit()

        # –ß–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ Redis (–ª–µ–Ω–∏–≤–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try:
            from bot.services.redis_conn import redis
            await redis.delete(f"visual_captcha_enabled:{chat.id}")
            await redis.delete(f"group:{chat.id}:mute_new_members")
            await redis.delete(f"group_link:private_{chat.id}")
        except Exception as re:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat.id}: {re}")

        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat.id} –∏ —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat.id}: {e}")
        await session.rollback()

@bot_activity_handlers_router.chat_join_request()
async def handle_join_request(chat_join_request: ChatJoinRequest, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    chat_id = chat_join_request.chat.id
    user = chat_join_request.from_user

    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –≥—Ä—É–ø–ø—É {chat_id}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞
        if not await is_visual_captcha_enabled(session, chat_id):
            logger.info(f"‚õî –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}, –≤—ã—Ö–æ–¥–∏–º –∏–∑ handle_join_request")
            return

        logger.info(f"‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –ù–ï –ì–ï–ù–ï–†–ò–†–£–ï–ú –ö–ê–ü–ß–£ –°–†–ê–ó–£ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        group_name = str(chat_id)

        # –°–æ–∑–¥–∞–µ–º deep link
        deep_link = await create_deeplink_for_captcha(chat_join_request.bot, group_name)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await get_captcha_keyboard(deep_link)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
        chat = chat_join_request.chat
        group_title = (
            chat.title.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            if chat.title else "–≥—Ä—É–ø–ø–∞"
        )
        logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{group_title}' (–∏—Å—Ö–æ–¥–Ω–æ–µ: '{chat.title}')")

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_link = None
        if chat.username:
            # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º username
            group_link = f"https://t.me/{chat.username}"
        else:
            # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ - —Å–æ–∑–¥–∞–µ–º invite link
            try:
                invite_link = await chat_join_request.bot.create_chat_invite_link(
                    chat_id=chat.id,
                    creates_join_request=False
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite_link.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ
                group_link = str(invite_link.invite_link) if invite_link.invite_link else None
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invite link –¥–ª—è –≥—Ä—É–ø–ø—ã {chat.id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
        if group_link:
            message_text = (
                f"üîí –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <a href='{group_link}'>{group_title}</a> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )
        else:
            # Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
            message_text = (
                f"üîí –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <b>{group_title}</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π (–ë–ï–ó –§–û–¢–û)
        try:
            msg = await chat_join_request.bot.send_message(
                chat_id=user.id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"üì§ –ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
            import asyncio
            from bot.services.visual_captcha_logic import delete_message_after_delay
            asyncio.create_task(delete_message_after_delay(chat_join_request.bot, user.id, msg.message_id, 150))
        except Exception as send_error:
            error_msg = str(send_error)
            if "bot can't initiate conversation with a user" in error_msg:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            elif "bot was blocked by the user" in error_msg:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {send_error}")
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥
            return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {e}")
        await session.rollback()
        raise
