# handlers/captcha/visual_captcha_handler.py
import asyncio
import logging
import traceback
from typing import Dict, Optional, Any

from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ChatJoinRequest

from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.redis_conn import redis
from bot.services.visual_captcha_logic import (
    generate_visual_captcha,
    delete_message_after_delay,
    save_join_request,
    create_deeplink_for_captcha,
    get_captcha_keyboard,
    get_group_settings_keyboard,
    get_group_join_keyboard,
    save_captcha_data,
    get_captcha_data,
    set_rate_limit,
    check_rate_limit,
    get_rate_limit_time_left,
    check_admin_rights,
    set_visual_captcha_status,
    get_visual_captcha_status,
    approve_chat_join_request,
    get_group_display_name,
    save_user_to_db,
    get_group_link_from_redis_or_create,
    schedule_captcha_reminder,
    start_behavior_tracking,
    track_captcha_input,
    increment_captcha_attempts,
    get_enhanced_captcha_decision,
    save_scam_level_to_db,
    get_user_scam_level,
    reset_user_scam_level,
)
# from bot.services.scammer_tracker_logic import track_captcha_failure  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
from bot.database.queries import get_group_by_name
from bot.services.bot_activity_journal.bot_activity_journal_logic import (
    log_join_request,
    log_captcha_passed,
    log_captcha_failed,
    log_captcha_timeout
)

logger = logging.getLogger(__name__)

visual_captcha_handler_router = Router()


class CaptchaStates(StatesGroup):
    waiting_for_captcha = State()


@visual_captcha_handler_router.chat_join_request()
async def handle_join_request(join_request: ChatJoinRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:
    - –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é deep-link –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏.
    - –ù–µ –¥–∞—ë–º ¬´–±–∏—Ç—É—é¬ª —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏.
    """
    user = join_request.from_user
    chat = join_request.chat
    user_id = user.id
    chat_id = chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞
    captcha_enabled = await get_visual_captcha_status(chat_id)
    if not captcha_enabled:
        logger.info(f"‚õî –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}, –≤—ã—Ö–æ–¥–∏–º")
        return

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –≤ deep-link: username –∏–ª–∏ private_<id>
    group_id = chat.username or f"private_{chat.id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ approve)
    await save_join_request(user_id, chat_id, group_id)

    # –°–æ–∑–¥–∞—ë–º start deep-link –Ω–∞ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
    deep_link = await create_deeplink_for_captcha(join_request.bot, group_id)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É¬ª
    keyboard = await get_captcha_keyboard(deep_link)

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user_messages = await redis.get(f"user_messages:{user_id}")
        if user_messages:
            message_ids = user_messages.split(",")
            for msg_id in message_ids:
                try:
                    await join_request.bot.delete_message(chat_id=user_id, message_id=int(msg_id))
                except Exception as e:
                    if "message to delete not found" not in str(e).lower():
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {str(e)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
        group_title = (
            chat.title.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            if chat.title else "–≥—Ä—É–ø–ø–∞"
        )
        logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{group_title}' (–∏—Å—Ö–æ–¥–Ω–æ–µ: '{chat.title}')")

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_link = None
        if chat.username:
            # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º username
            group_link = f"https://t.me/{chat.username}"
        else:
            # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ - —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
            try:
                invite = await join_request.bot.create_chat_invite_link(
                    chat_id=chat_id,
                    name=f"Captcha invite for user {user_id}",
                    creates_join_request=False,
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ
                group_link = str(invite.invite_link) if invite.invite_link else None
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã {chat_id}: {group_link}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º tg:// —Å—Å—ã–ª–∫—É
                group_link = f"tg://resolve?domain={chat_id}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
        if group_link:
            message_text = (
                f"üîí –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <a href='{group_link}'>{group_title}</a> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )
        else:
            # Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
            message_text = (
                f"üîí –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <b>{group_title}</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        msg = await join_request.bot.send_message(
            user_id,
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–ø—á–∏")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
        try:
            from bot.database.session import get_session
            async with get_session() as session:
                await log_join_request(
                    bot=join_request.bot,
                    user=user,
                    chat=chat,
                    captcha_status="–ö–ê–ü–ß–ê_–û–¢–ü–†–ê–í–õ–ï–ù–ê",
                    saved_to_db=False,
                    session=session
                )
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {log_error}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
        asyncio.create_task(delete_message_after_delay(join_request.bot, user_id, msg.message_id, 150))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
        await redis.setex(f"user_messages:{user_id}", 3600, str(msg.message_id))

    except Exception as e:
        error_msg = str(e)
        if "bot can't initiate conversation with a user" in error_msg:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏
            await log_join_request(
                bot=join_request.bot,
                user=user,
                chat=chat,
                captcha_status="–ö–ê–ü–ß–ê_–ù–ï_–£–î–ê–õ–ê–°–¨_–ù–ï–¢_–î–ò–ê–õ–û–ì–ê",
                saved_to_db=False
            )
        elif "bot was blocked by the user" in error_msg:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏
            await log_join_request(
                bot=join_request.bot,
                user=user,
                chat=chat,
                captcha_status="–ö–ê–ü–ß–ê_–ù–ï_–£–î–ê–õ–ê–°–¨_–ë–û–¢_–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù",
                saved_to_db=False
            )
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {e}")
            logger.debug(traceback.format_exc())


@visual_captcha_handler_router.message(CommandStart(deep_link=True))
async def process_visual_captcha_deep_link(message: Message, bot: Bot, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å deep_link –≤–∏–¥–∞ deep_link_<group_id_or_username>.
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_data = {
            "user_id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "is_bot": message.from_user.is_bot,
            "is_premium": message.from_user.is_premium,
            "added_to_attachment_menu": message.from_user.added_to_attachment_menu,
            "can_join_groups": message.from_user.can_join_groups,
            "can_read_all_group_messages": message.from_user.can_read_all_group_messages,
            "supports_inline_queries": message.from_user.supports_inline_queries,
            "can_connect_to_business": message.from_user.can_connect_to_business,
            "has_main_web_app": message.from_user.has_main_web_app,
        }
        await save_user_to_db(session, user_data)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º deep_link –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        deep_link_args = message.text.split()[1] if len(message.text.split()) > 1 else None
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω deep link —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {deep_link_args}")

        if not deep_link_args or not deep_link_args.startswith("deep_link_"):
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.")
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π deep link: {deep_link_args}")
            return

        # –ß–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
        stored = await state.get_data()
        prev_ids = stored.get("message_ids", [])
        for mid in prev_ids:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=mid)
            except Exception as e:
                if "message to delete not found" not in str(e).lower():
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {mid}: {e}")

        # –¢–∞–∫–∂–µ —á–∏—Å—Ç–∏–º, –µ—Å–ª–∏ ID –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Redis
        user_messages = await redis.get(f"user_messages:{message.from_user.id}")
        if user_messages:
            try:
                for mid in user_messages.split(","):
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=int(mid))
                    except Exception as e:
                        if "message to delete not found" not in str(e).lower():
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {mid}: {e}")
                await redis.delete(f"user_messages:{message.from_user.id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis: {e}")

        # –ò–º—è/ID –≥—Ä—É–ø–ø—ã –∏–∑ deep-link
        group_name = deep_link_args.replace("deep_link_", "")
        logger.info(f"Extracted group name from deep-link: {group_name}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
        captcha_answer, captcha_image = await generate_visual_captcha()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–ø—á–∞, –æ—Ç–≤–µ—Ç: {captcha_answer}")

        # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await start_behavior_tracking(message.from_user.id)

        # –ü–∏—à–µ–º –≤ FSM + Redis
        await state.update_data(captcha_answer=captcha_answer, group_name=group_name, attempts=0, message_ids=[])
        await save_captcha_data(message.from_user.id, captcha_answer, group_name, 0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–∞–ø—á—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        captcha_sent = False
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                captcha_msg = await message.answer_photo(
                    photo=captcha_image,
                    caption=(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, "
                        "–∏–ª–∏ —Ä–µ—à–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                    ),
                )
                message_ids = [captcha_msg.message_id]
                await state.update_data(message_ids=message_ids)

                # –£–¥–∞–ª–∏–º –∫–∞–ø—á—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
                asyncio.create_task(delete_message_after_delay(bot, message.chat.id, captcha_msg.message_id, 300))
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
                asyncio.create_task(schedule_captcha_reminder(bot, message.from_user.id, group_name, 2))
                
                await state.set_state(CaptchaStates.waiting_for_captcha)
                captcha_sent = True
                break
                
            except Exception as network_error:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {network_error}")
                if attempt < 2:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue

        if not captcha_sent:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏: {network_error}")
            # –§–æ–ª–±—ç–∫ ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–¥
            try:
                fallback_msg = await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏.\n\n"
                    f"üîë –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É: **{captcha_answer}**\n"
                    "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                    parse_mode="Markdown",
                )
                await state.update_data(message_ids=[fallback_msg.message_id])
                await state.set_state(CaptchaStates.waiting_for_captcha)
                asyncio.create_task(delete_message_after_delay(bot, message.chat.id, fallback_msg.message_id, 300))
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
                asyncio.create_task(schedule_captcha_reminder(bot, message.from_user.id, group_name, 2))
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback-—Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_visual_captcha_deep_link: {e}")
        logger.debug(traceback.format_exc())
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass
        await state.clear()


@visual_captcha_handler_router.message(CaptchaStates.waiting_for_captcha)
async def process_captcha_answer(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ:
    - approve join request (–µ—Å–ª–∏ –±—ã–ª),
    - –æ—Ç–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º tg:// —Å—Å—ã–ª–æ–∫),
    - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ.
    """
    user_id = message.from_user.id

    try:
        # –û–±–Ω–æ–≤–∏–º —é–∑–µ—Ä–∞ –≤ –ë–î (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Ç.–ø.)
        await save_user_to_db(
            session,
            {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "language_code": message.from_user.language_code,
                "is_bot": message.from_user.is_bot,
                "is_premium": message.from_user.is_premium,
            },
        )

        # –†–µ–π—Ç–ª–∏–º–∏—Ç
        if await check_rate_limit(user_id):
            time_left = await get_rate_limit_time_left(user_id)
            limit_msg = await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {time_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
            asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, limit_msg.message_id, 5))
            return

        # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM (–∏–ª–∏ Redis)
        data = await state.get_data()
        captcha_answer = data.get("captcha_answer")
        group_name = data.get("group_name")
        attempts = data.get("attempts", 0)
        message_ids = data.get("message_ids", [])
        moderate_risk_check = data.get("moderate_risk_check", False)
        additional_answer = data.get("additional_answer")

        # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–º —Ä–∏—Å–∫–µ
        if moderate_risk_check and additional_answer:
            user_answer = (message.text or "").strip().lower()
            if user_answer == additional_answer.lower():
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
                success_msg = await message.answer(
                    "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!</b>\n\n"
                    "üéâ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω</b>\n"
                    "üîó <b>–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É</b>",
                    parse_mode="HTML"
                )
                message_ids.append(success_msg.message_id)
                await state.update_data(message_ids=message_ids)
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                for mid in message_ids:
                    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 5))
                
                # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                await approve_user_join_request(message, group_name, message_ids)
                await state.clear()
                return
            else:
                # –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –±–ª–æ–∫–∏—Ä—É–µ–º
                wrong_additional_msg = await message.answer(
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
                    f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª:</b> <code>{additional_answer}</code>\n"
                    f"üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>",
                    parse_mode="HTML"
                )
                message_ids.append(wrong_additional_msg.message_id)
                await state.update_data(message_ids=message_ids)
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                for mid in message_ids:
                    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 10))
                
                await redis.delete(f"captcha:{message.from_user.id}")
                await state.clear()
                return

        if not captcha_answer or not group_name:
            captcha_data = await get_captcha_data(message.from_user.id)
            if captcha_data:
                captcha_answer = captcha_data["captcha_answer"]
                group_name = captcha_data["group_name"]
                attempts = captcha_data["attempts"]
            else:
                no_captcha_msg = await message.answer("–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                message_ids.append(no_captcha_msg.message_id)
                await state.update_data(message_ids=message_ids)
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, no_captcha_msg.message_id, 5))
                await state.clear()
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        if attempts >= 3:
            too_many = await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
            message_ids.append(too_many.message_id)
            await state.update_data(message_ids=message_ids)
            asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, too_many.message_id, 5))

            await redis.delete(f"captcha:{message.from_user.id}")
            await set_rate_limit(message.from_user.id, 60)
            time_left = await get_rate_limit_time_left(message.from_user.id)
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {time_left} —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answer = (message.text or "").strip()
        await track_captcha_input(message.from_user.id, user_answer)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        current_attempts = await increment_captcha_attempts(message.from_user.id)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_data = {
            "id": message.from_user.id,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º "id" –≤–º–µ—Å—Ç–æ "user_id"
            "user_id": message.from_user.id,  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "is_bot": message.from_user.is_bot,
            "is_premium": message.from_user.is_premium,
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}]")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_id_for_analysis = 0
        if group_name.startswith("private_"):
            chat_id_for_analysis = int(group_name.replace("private_", ""))
        elif group_name.startswith("-") and group_name[1:].isdigit():
            chat_id_for_analysis = int(group_name)
        else:
            # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ Redis
            chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
            if chat_id_from_redis:
                chat_id_for_analysis = int(chat_id_from_redis)
        
        decision = await get_enhanced_captcha_decision(
            message.from_user.id, 
            user_data, 
            str(captcha_answer), 
            user_answer,
            message.bot,
            chat_id_for_analysis if chat_id_for_analysis != 0 else None
        )
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}]")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –≤ –ë–î (–≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            chat_id_for_db = 0
            if group_name.startswith("private_"):
                chat_id_for_db = int(group_name.replace("private_", ""))
            elif group_name.startswith("-") and group_name[1:].isdigit():
                chat_id_for_db = int(group_name)
            else:
                # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ Redis
                chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                if chat_id_from_redis:
                    chat_id_for_db = int(chat_id_from_redis)
            
            if chat_id_for_db != 0:
                await save_scam_level_to_db(
                    session, 
                    message.from_user.id, 
                    chat_id_for_db, 
                    decision["total_risk_score"], 
                    decision["risk_factors"], 
                    user_data,
                    message.bot
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∫–∞–ø—á–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                try:
                    from bot.utils.logger import log_captcha_attempt_with_buttons
                    chat_info = await message.bot.get_chat(chat_id_for_db)
                    log_captcha_attempt_with_buttons(
                        username=message.from_user.username,
                        user_id=message.from_user.id,
                        chat_name=chat_info.title,
                        chat_id=chat_id_for_db,
                        risk_score=decision["total_risk_score"],
                        risk_factors=decision["risk_factors"],
                        method="–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞"
                    )
                except Exception as log_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏ –∫–∞–ø—á–∏: {log_error}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞ –≤ –ë–î: {e}")

        if decision["approved"]:
            # –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞
            await redis.delete(f"captcha:{message.from_user.id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É
            reminder_key = f"captcha_reminder_msgs:{message.from_user.id}"
            reminder_msgs = await redis.get(reminder_key)
            if reminder_msgs:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                reminder_str = reminder_msgs.decode('utf-8') if isinstance(reminder_msgs, bytes) else str(reminder_msgs)
                for reminder_id in reminder_str.split(","):
                    try:
                        await message.bot.delete_message(chat_id=message.from_user.id, message_id=int(reminder_id))
                    except Exception as e:
                        if "message to delete not found" not in str(e).lower():
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}: {e}")
                await redis.delete(reminder_key)

            # –£–¥–∞–ª–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º—É—Ç–∏—Ç—å —Å–∫–∞–º–º–µ—Ä–∞
            if decision.get("should_auto_mute", False):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                await redis.setex(f"auto_mute_scammer:{message.from_user.id}:{chat_id_for_analysis}", 300, "1")
                logger.warning(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}] –ø–æ–º–µ—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞ –∫–∞–∫ —Å–∫–∞–º–º–µ—Ä")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è approve
            chat_id: Optional[int] = None
            if group_name.startswith("private_"):
                chat_id = int(group_name.replace("private_", ""))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_name —á–∏—Å–ª–æ–≤—ã–º ID –≥—Ä—É–ø–ø—ã
                try:
                    # –ï—Å–ª–∏ group_name —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)
                    if group_name.startswith("-") and group_name[1:].isdigit():
                        chat_id = int(group_name)
                        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω chat_id –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ ID: {chat_id}")
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ Redis –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É group_name
                        if await redis.exists(f"join_request:{message.from_user.id}:{group_name}"):
                            val = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                            chat_id = int(val)
                            logger.info(f"–ù–∞–π–¥–µ–Ω chat_id –≤ Redis: {chat_id}")
                except ValueError:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å group_name –≤ chat_id: {group_name}")

            if chat_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                result = await approve_chat_join_request(message.bot, chat_id, message.from_user.id)

                if result["success"]:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
                    await redis.setex(f"captcha_passed:{message.from_user.id}:{chat_id}", 3600, "1")
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}] –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    try:
                        chat = await message.bot.get_chat(chat_id)
                        group_display_name = chat.title
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_display_name}")
                        
                        # –õ–û–ì–ò–†–£–ï–ú –£–°–ü–ï–®–ù–û–ï –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –ö–ê–ü–ß–ò
                        scammer_level = decision.get("total_risk_score", 0)
                        await log_captcha_passed(
                            bot=message.bot,
                            user=message.from_user,
                            chat=chat,
                            scammer_level=scammer_level,
                            session=session
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                        group_display_name = group_name.replace("_", " ").title()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
                    group_link_for_keyboard = result.get("group_link")
                    if group_link_for_keyboard:
                        if isinstance(group_link_for_keyboard, bytes):
                            group_link_for_keyboard = group_link_for_keyboard.decode('utf-8')
                        elif not isinstance(group_link_for_keyboard, str):
                            group_link_for_keyboard = str(group_link_for_keyboard) if group_link_for_keyboard else None
                    logger.info(f"üîó –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É (approve_user): group_link='{group_link_for_keyboard}' (—Ç–∏–ø: {type(group_link_for_keyboard)})")
                    
                    try:
                        keyboard = await get_group_join_keyboard(group_link_for_keyboard, group_display_name)
                        success_msg = await message.answer(result["message"], reply_markup=keyboard, parse_mode="HTML")
                    except Exception as keyboard_error:
                        error_msg = str(keyboard_error)
                        if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ (process_captcha_answer), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {keyboard_error}")
                            success_msg = await message.answer(result["message"], parse_mode="HTML")
                            if group_link_for_keyboard:
                                try:
                                    await message.answer(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n{group_link_for_keyboard}")
                                except Exception:
                                    pass
                        else:
                            raise keyboard_error
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
                    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, success_msg.message_id, 150))
                else:
                    # –û—à–∏–±–∫–∞ approve ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å—Å—ã–ª–∫—É
                    await message.answer(result["message"], parse_mode="HTML")

                    if result["group_link"]:
                        try:
                            chat = await message.bot.get_chat(chat_id)
                            group_display_name = chat.title
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è fallback: {group_display_name}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è fallback: {e}")
                            group_display_name = group_name.replace("_", " ").title()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
                        group_link_for_keyboard = result.get("group_link")
                        if group_link_for_keyboard:
                            if isinstance(group_link_for_keyboard, bytes):
                                group_link_for_keyboard = group_link_for_keyboard.decode('utf-8')
                            elif not isinstance(group_link_for_keyboard, str):
                                group_link_for_keyboard = str(group_link_for_keyboard) if group_link_for_keyboard else None
                        logger.info(f"üîó –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É (fallback): group_link='{group_link_for_keyboard}' (—Ç–∏–ø: {type(group_link_for_keyboard)})")
                        
                        try:
                            keyboard = await get_group_join_keyboard(group_link_for_keyboard, group_display_name)
                            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
                        except Exception as keyboard_error:
                            error_msg = str(keyboard_error)
                            if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ (process_captcha_answer fallback), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º: {keyboard_error}")
                                if group_link_for_keyboard:
                                    await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\nüîó {group_link_for_keyboard}")
                                else:
                                    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ.")
                            else:
                                raise keyboard_error

                logger.info(f"–û–¥–æ–±—Ä–µ–Ω/–æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ user=@{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}] group={group_name}")
            else:
                # –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–¥–∞—ë–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                if group_name.startswith("private_"):
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ join_request ‚Äî –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                    warn = await message.answer(
                        "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É."
                    )
                    message_ids.append(warn.message_id)
                    await state.update_data(message_ids=message_ids)
                else:
                    group_info = await get_group_by_name(session, group_name)
                    if group_info:
                        group_link = f"https://t.me/{group_name}"
                        try:
                            keyboard = await get_group_join_keyboard(group_link, group_info.title)
                            success_msg = await message.answer(
                                f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{group_info.title}¬ª:",
                                reply_markup=keyboard,
                            )
                        except Exception as keyboard_error:
                            error_msg = str(keyboard_error)
                            if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ (get_group_by_name), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {keyboard_error}")
                                success_msg = await message.answer(
                                    f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{group_info.title}¬ª:\nüîó {group_link}"
                                )
                            else:
                                raise keyboard_error
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
                        asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, success_msg.message_id, 150))
                    else:
                        group_link = await get_group_link_from_redis_or_create(message.bot, group_name)
                        if not group_link:
                            await message.answer(
                                "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É. "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
                            )
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                            try:
                                if group_name.startswith("private_"):
                                    chat_id_for_name = int(group_name.replace("private_", ""))
                                    chat = await message.bot.get_chat(chat_id_for_name)
                                    display_name = chat.title
                                elif group_name.startswith("-") and group_name[1:].isdigit():
                                    # –ï—Å–ª–∏ group_name —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã
                                    chat = await message.bot.get_chat(int(group_name))
                                    display_name = chat.title
                                else:
                                    # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ Redis
                                    chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                                    if chat_id_from_redis:
                                        chat = await message.bot.get_chat(int(chat_id_from_redis))
                                        display_name = chat.title
                                    else:
                                        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º group_name –∫–∞–∫ –µ—Å—Ç—å
                                        display_name = group_name.replace("_", " ").title()
                                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {display_name}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                                display_name = group_name.replace("_", " ").title()
                            
                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å bytes –∏–∑ Redis)
                            if isinstance(group_link, bytes):
                                group_link = group_link.decode('utf-8')
                            elif not isinstance(group_link, str):
                                group_link = str(group_link) if group_link else None
                            
                            try:
                                keyboard = await get_group_join_keyboard(group_link, display_name)
                                await message.answer(
                                    f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{display_name}¬ª:",
                                    reply_markup=keyboard,
                                )
                            except Exception as keyboard_error:
                                error_msg = str(keyboard_error)
                                if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ (get_group_link_from_redis), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º: {keyboard_error}")
                                    await message.answer(
                                        f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{display_name}¬ª:\nüîó {group_link}"
                                    )
                                else:
                                    raise keyboard_error

            await state.clear()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ (30-49 –±–∞–ª–ª–æ–≤)
        elif not decision["approved"] and 30 <= decision["total_risk_score"] < 50:
            # –î–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            factors_text = ", ".join(decision['risk_factors'][:2]) if decision['risk_factors'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            moderate_risk_msg = await message.answer(
                f"‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫</b>\n\n"
                f"üìä <b>–û—Ü–µ–Ω–∫–∞:</b> {decision['total_risk_score']}/100\n"
                f"üîç <b>–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:</b> {factors_text}\n\n"
                f"üõ°Ô∏è <b>–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n"
                f"‚ùì <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>",
                parse_mode="HTML"
            )
            message_ids.append(moderate_risk_msg.message_id)
            await state.update_data(message_ids=message_ids)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            additional_questions = [
                ("–¥–∞", "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:</b> <code>–¥–∞</code>"),
                ("–Ω–µ—Ç", "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:</b> <code>–Ω–µ—Ç</code>"),
                ("–ø—Ä–∏–≤–µ—Ç", "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:</b> <code>–ø—Ä–∏–≤–µ—Ç</code>"),
                ("—Å–ø–∞—Å–∏–±–æ", "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:</b> <code>—Å–ø–∞—Å–∏–±–æ</code>"),
                ("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:</b> <code>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞</code>")
            ]
            
            import random
            additional_answer, additional_question = random.choice(additional_questions)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                additional_question=additional_question,
                additional_answer=additional_answer,
                moderate_risk_check=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            additional_msg = await message.answer(additional_question, parse_mode="HTML")
            message_ids.append(additional_msg.message_id)
            await state.update_data(message_ids=message_ids)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 120))
            
            return

        # –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        attempts += 1
        await state.update_data(attempts=attempts)
        
        # –õ–û–ì–ò–†–£–ï–ú –ù–ï–£–î–ê–ß–ù–£–Æ –ü–û–ü–´–¢–ö–£ –ö–ê–ü–ß–ò
        try:
            chat_id_for_log_failed = 0
            if group_name.startswith("private_"):
                chat_id_for_log_failed = int(group_name.replace("private_", ""))
            elif group_name.startswith("-") and group_name[1:].isdigit():
                chat_id_for_log_failed = int(group_name)
            else:
                chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                if chat_id_from_redis:
                    chat_id_for_log_failed = int(chat_id_from_redis)
            
            if chat_id_for_log_failed != 0:
                try:
                    chat_for_log = await message.bot.get_chat(chat_id_for_log_failed)
                    await log_captcha_failed(
                        bot=message.bot,
                        user=message.from_user,
                        chat=chat_for_log,
                        attempt=attempts,
                        reason=decision.get("reason", "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"),
                        session=session
                    )
                except Exception as log_fail_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–∞–ø—á–∏: {log_fail_error}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–∏: {e}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞)
        if not decision["approved"] and decision["total_risk_score"] >= 100:
            blocked_msg = await message.answer(
                f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {decision['reason']}\n"
                f"–ü—Ä–∏—á–∏–Ω—ã: {', '.join(decision['risk_factors'])}"
            )
            message_ids.append(blocked_msg.message_id)
            await state.update_data(message_ids=message_ids)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 10))
            
            await redis.delete(f"captcha:{message.from_user.id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É
            reminder_key = f"captcha_reminder_msgs:{message.from_user.id}"
            reminder_msgs = await redis.get(reminder_key)
            if reminder_msgs:
                reminder_str = reminder_msgs.decode('utf-8') if isinstance(reminder_msgs, bytes) else str(reminder_msgs)
                for reminder_id in reminder_str.split(","):
                    try:
                        await message.bot.delete_message(chat_id=message.from_user.id, message_id=int(reminder_id))
                    except Exception as e:
                        if "message to delete not found" not in str(e).lower():
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}: {e}")
                await redis.delete(reminder_key)
            
            await state.clear()
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å chat_id)
        try:
            chat_id_for_log = 0
            if group_name.startswith("private_"):
                chat_id_for_log = int(group_name.replace("private_", ""))
            elif group_name.startswith("-") and group_name[1:].isdigit():
                # –ï—Å–ª–∏ group_name —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã
                chat_id_for_log = int(group_name)
            else:
                # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ Redis
                chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                if chat_id_from_redis:
                    chat_id_for_log = int(chat_id_from_redis)
            
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π chat_id
            if chat_id_for_log != 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ —Å–∫–∞–º–º–µ—Ä–∞
                logger.info(f"üìä –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.first_name or message.from_user.id} [{message.from_user.id}] –≤ –≥—Ä—É–ø–ø–µ {chat_id_for_log}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–∞–ø—á–∏: {e}")

        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        if attempts >= 3:
            if group_name.startswith("private_"):
                too_many_msg = await message.answer(
                    "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
                )
            else:
                group_link = await get_group_link_from_redis_or_create(message.bot, group_name)
                if group_link:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    try:
                        if group_name.startswith("private_"):
                            chat_id_for_name = int(group_name.replace("private_", ""))
                            chat = await message.bot.get_chat(chat_id_for_name)
                            group_title = chat.title
                        elif group_name.startswith("-") and group_name[1:].isdigit():
                            chat = await message.bot.get_chat(int(group_name))
                            group_title = chat.title
                        else:
                            group_title = group_name.replace("_", " ").title()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è too_many: {e}")
                        group_title = group_name.replace("_", " ").title()
                    
                    too_many_msg = await message.answer(
                        "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.\n"
                        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É: <a href='{group_link}'>{group_title}</a>",
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                    )
                else:
                    too_many_msg = await message.answer(
                        "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É."
                    )

            message_ids.append(too_many_msg.message_id)
            await state.update_data(message_ids=message_ids)

            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 90))

            await redis.delete(f"captcha:{message.from_user.id}")
            await set_rate_limit(message.from_user.id, 60)
            
            # –õ–û–ì–ò–†–£–ï–ú –¢–ê–ô–ú–ê–£–¢ –ö–ê–ü–ß–ò (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫)
            try:
                chat_id_for_timeout = 0
                if group_name.startswith("private_"):
                    chat_id_for_timeout = int(group_name.replace("private_", ""))
                elif group_name.startswith("-") and group_name[1:].isdigit():
                    chat_id_for_timeout = int(group_name)
                else:
                    chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                    if chat_id_from_redis:
                        chat_id_for_timeout = int(chat_id_from_redis)
                
                if chat_id_for_timeout != 0:
                    try:
                        chat_for_timeout = await message.bot.get_chat(chat_id_for_timeout)
                        await log_captcha_timeout(
                            bot=message.bot,
                            user=message.from_user,
                            chat=chat_for_timeout,
                            attempts=attempts,
                            session=session
                        )
                    except Exception as timeout_log_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {timeout_log_error}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞: {e}")
            
            await state.clear()
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
        try:
            new_answer, new_image = await generate_visual_captcha()
            await state.update_data(captcha_answer=new_answer)
            await save_captcha_data(message.from_user.id, new_answer, group_name, attempts)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—á–∏
            await start_behavior_tracking(message.from_user.id)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 5))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
            if decision["total_risk_score"] > 0:
                factors_text = ", ".join(decision['risk_factors'][:2]) if decision['risk_factors'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                error_msg = (
                    f"‚ùå <b>{decision['reason']}</b>\n\n"
                    f"‚ö†Ô∏è <b>–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:</b> {factors_text}\n"
                    f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b> {3 - attempts}"
                )
            else:
                error_msg = (
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç</b>\n\n"
                    f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b> {3 - attempts}"
                )
            
            wrong_msg = await message.answer(error_msg, parse_mode="HTML")

            try:
                captcha_msg = await message.answer_photo(
                    photo=new_image,
                    caption="üß© <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ä–µ—à–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:</b>",
                    parse_mode="HTML"
                )
                message_ids = [wrong_msg.message_id, captcha_msg.message_id]
            except Exception as network_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–π –∫–∞–ø—á–∏: {network_error}")
                fallback_msg = await message.answer(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏.\n"
                    f"üîë –í–∞—à –∫–æ–¥: **{new_answer}**\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:",
                    parse_mode="Markdown",
                )
                message_ids = [wrong_msg.message_id, fallback_msg.message_id]

            await state.update_data(message_ids=message_ids)

            # –£–¥–∞–ª–∏–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            for mid in message_ids:
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, mid, 300))
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—á–∏
            asyncio.create_task(schedule_captcha_reminder(message.bot, message.from_user.id, group_name, 2))

        except Exception as captcha_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–∞–ø—á–∏: {captcha_error}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É: {e}")
        logger.debug(traceback.format_exc())
        try:
            err_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.")
            data = await state.get_data()
            mids = data.get("message_ids", [])
            mids.append(err_msg.message_id)
            await state.update_data(message_ids=mids)
        except Exception:
            pass


@visual_captcha_handler_router.message(Command("check"))
async def cmd_check(message: Message, session: AsyncSession):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await save_user_to_db(
        session,
        {
            "user_id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
        },
    )
    try:
        await message.bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ‚úÖ")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


@visual_captcha_handler_router.message(Command("checkuser"))
async def cmd_check_user(message: Message, session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID –∏–ª–∏ @username)."""
    await save_user_to_db(
        session,
        {
            "user_id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
        },
    )

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /checkuser <id –∏–ª–∏ @username>")
        return

    target = args[1]
    try:
        if target.isdigit():
            target_id = int(target)
        elif target.startswith("@"):
            username = target[1:]
            chat = await message.bot.get_chat(username)
            target_id = chat.id
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ @username")
            return

        await message.bot.send_message(target_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚úÖ")
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {target_id})")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


@visual_captcha_handler_router.callback_query(F.data == "visual_captcha_settings")
async def visual_captcha_settings(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    user_id = callback_query.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    try:
        is_admin = await check_admin_rights(callback_query.bot, int(group_id), user_id)
        if not is_admin:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        captcha_enabled = await redis.get(f"visual_captcha_enabled:{group_id}") or "0"
        keyboard = await get_group_settings_keyboard(group_id, captcha_enabled)

        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–µ–π.",
            reply_markup=keyboard,
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@visual_captcha_handler_router.callback_query(F.data.startswith("set_visual_captcha:"))
async def set_visual_captcha(callback_query: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ (–≤–∫–ª/–≤—ã–∫–ª)."""
    parts = callback_query.data.split(":")
    if len(parts) < 3:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    chat_id = parts[1]
    enabled = parts[2]

    try:
        user_id = callback_query.from_user.id
        is_admin = await check_admin_rights(callback_query.bot, int(chat_id), user_id)
        if not is_admin:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        await set_visual_captcha_status(int(chat_id), enabled == "1")
        status_message = "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞" if enabled == "1" else "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        await callback_query.answer(status_message, show_alert=True)

        keyboard = await get_group_settings_keyboard(chat_id, enabled)
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–µ–π.",
            reply_markup=keyboard,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@visual_captcha_handler_router.callback_query(F.data == "captcha_settings")
async def back_to_main_captcha_settings(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–∞–ø—á–∏ –≤ –õ–°."""
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", show_alert=True)
        return

    await callback.answer()
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ group_settings_handler
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /settings", show_alert=True)


@visual_captcha_handler_router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if user_id == 619924982:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!</b>\n\n"
            "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø\n"
            "‚Ä¢ /bot_access - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\n"
            "‚Ä¢ /drop scam - –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞\n"
            "‚Ä¢ /help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
            "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bot_access –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–∞."
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
            "‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )
    
    await message.answer(text, parse_mode="HTML")


@visual_captcha_handler_router.message(Command("drop"))
async def drop_scam_command(message: Message, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    if user_id != 619924982:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 3:
        await message.answer(
            "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "<code>/drop scam &lt;user_id&gt;</code> - —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "<code>/drop scam &lt;user_id&gt; &lt;chat_id&gt;</code> - —Å–±—Ä–æ—Å–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>/drop scam 123456789</code>\n"
            "<code>/drop scam 123456789 -1001234567890</code>",
            parse_mode="HTML"
        )
        return
    
    if args[1].lower() != "scam":
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–±—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/drop scam &lt;user_id&gt;</code>", parse_mode="HTML")
        return
    
    try:
        target_user_id = int(args[2])
        target_chat_id = int(args[3]) if len(args) > 3 else None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞
        success = await reset_user_scam_level(session, target_user_id, target_chat_id)
        
        if success:
            if target_chat_id:
                await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ –≥—Ä—É–ø–ø–µ {target_chat_id}")
            else:
                await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /drop scam: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


async def approve_user_join_request(message: Message, group_name: str, message_ids: list):
    """–û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è approve
        chat_id: Optional[int] = None
        if group_name.startswith("private_"):
            chat_id = int(group_name.replace("private_", ""))
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_name —á–∏—Å–ª–æ–≤—ã–º ID –≥—Ä—É–ø–ø—ã
            try:
                # –ï—Å–ª–∏ group_name —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)
                if group_name.startswith("-") and group_name[1:].isdigit():
                    chat_id = int(group_name)
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω chat_id –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ ID: {chat_id}")
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ Redis –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É group_name
                    if await redis.exists(f"join_request:{message.from_user.id}:{group_name}"):
                        val = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                        chat_id = int(val)
                        logger.info(f"–ù–∞–π–¥–µ–Ω chat_id –≤ Redis: {chat_id}")
            except ValueError:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å group_name –≤ chat_id: {group_name}")

        if chat_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            result = await approve_chat_join_request(message.bot, chat_id, message.from_user.id)

            if result["success"]:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
                await redis.setex(f"captcha_passed:{message.from_user.id}:{chat_id}", 3600, "1")
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                try:
                    chat = await message.bot.get_chat(chat_id)
                    group_display_name = chat.title
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_display_name}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                    group_display_name = group_name.replace("_", " ").title()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
                group_link_for_keyboard = result.get("group_link")
                if group_link_for_keyboard:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å bytes –∏–∑ Redis –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
                    if isinstance(group_link_for_keyboard, bytes):
                        group_link_for_keyboard = group_link_for_keyboard.decode('utf-8')
                    elif not isinstance(group_link_for_keyboard, str):
                        group_link_for_keyboard = str(group_link_for_keyboard) if group_link_for_keyboard else None
                logger.info(f"üîó –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: group_link='{group_link_for_keyboard}' (—Ç–∏–ø: {type(group_link_for_keyboard)})")
                
                try:
                    keyboard = await get_group_join_keyboard(group_link_for_keyboard, group_display_name)
                    success_msg = await message.answer(result["message"], reply_markup=keyboard, parse_mode="HTML")
                except Exception as keyboard_error:
                    error_msg = str(keyboard_error)
                    if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {keyboard_error}")
                        success_msg = await message.answer(result["message"], parse_mode="HTML")
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        if group_link_for_keyboard:
                            try:
                                await message.answer(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n{group_link_for_keyboard}")
                            except Exception:
                                pass
                    else:
                        raise keyboard_error
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
                asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, success_msg.message_id, 150))
            else:
                # –û—à–∏–±–∫–∞ approve ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å—Å—ã–ª–∫—É
                await message.answer(result["message"], parse_mode="HTML")

                if result["group_link"]:
                    try:
                        chat = await message.bot.get_chat(chat_id)
                        group_display_name = chat.title
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è fallback: {group_display_name}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è fallback: {e}")
                        group_display_name = group_name.replace("_", " ").title()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
                    group_link_for_keyboard = result.get("group_link")
                    if group_link_for_keyboard:
                        if isinstance(group_link_for_keyboard, bytes):
                            group_link_for_keyboard = group_link_for_keyboard.decode('utf-8')
                        elif not isinstance(group_link_for_keyboard, str):
                            group_link_for_keyboard = str(group_link_for_keyboard) if group_link_for_keyboard else None
                    logger.info(f"üîó –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É (approve_user fallback): group_link='{group_link_for_keyboard}' (—Ç–∏–ø: {type(group_link_for_keyboard)})")
                    
                    try:
                        keyboard = await get_group_join_keyboard(group_link_for_keyboard, group_display_name)
                        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
                    except Exception as keyboard_error:
                        error_msg = str(keyboard_error)
                        if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ (fallback), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º: {keyboard_error}")
                            if group_link_for_keyboard:
                                await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\nüîó {group_link_for_keyboard}")
                            else:
                                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ.")
                        else:
                            raise keyboard_error

            logger.info(f"–û–¥–æ–±—Ä–µ–Ω/–æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ user={message.from_user.id} group={group_name}")
        else:
            # –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–¥–∞—ë–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
            if group_name.startswith("private_"):
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ join_request ‚Äî –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                warn = await message.answer(
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É."
                )
                message_ids.append(warn.message_id)
            else:
                group_link = await get_group_link_from_redis_or_create(message.bot, group_name)
                if not group_link:
                    await message.answer(
                        "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    try:
                        if group_name.startswith("private_"):
                            chat_id_for_name = int(group_name.replace("private_", ""))
                            chat = await message.bot.get_chat(chat_id_for_name)
                            display_name = chat.title
                        elif group_name.startswith("-") and group_name[1:].isdigit():
                            # –ï—Å–ª–∏ group_name —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã
                            chat = await message.bot.get_chat(int(group_name))
                            display_name = chat.title
                        else:
                            # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ Redis
                            chat_id_from_redis = await redis.get(f"join_request:{message.from_user.id}:{group_name}")
                            if chat_id_from_redis:
                                chat = await message.bot.get_chat(int(chat_id_from_redis))
                                display_name = chat.title
                            else:
                                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º group_name –∫–∞–∫ –µ—Å—Ç—å
                                display_name = group_name.replace("_", " ").title()
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {display_name}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                        display_name = group_name.replace("_", " ").title()
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º group_link –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å bytes –∏–∑ Redis)
                    if isinstance(group_link, bytes):
                        group_link = group_link.decode('utf-8')
                    elif not isinstance(group_link, str):
                        group_link = str(group_link) if group_link else None
                    
                    try:
                        keyboard = await get_group_join_keyboard(group_link, display_name)
                        success_msg = await message.answer(
                            f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{display_name}¬ª:",
                            reply_markup=keyboard,
                        )
                    except Exception as keyboard_error:
                        error_msg = str(keyboard_error)
                        if "400" in error_msg and "inline keyboard button" in error_msg.lower():
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {keyboard_error}")
                            success_msg = await message.answer(
                                f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ¬´{display_name}¬ª:\nüîó {group_link}"
                            )
                        else:
                            raise keyboard_error
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
                    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, success_msg.message_id, 150))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è fallback callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@visual_captcha_handler_router.callback_query(F.data == "captcha_fallback")
async def handle_captcha_fallback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è fallback –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏"""
    await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@visual_captcha_handler_router.callback_query(F.data == "group_link_fallback")
async def handle_group_link_fallback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è fallback –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ"""
    await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
