# handlers/admin_log_handlers.py
import logging
import os
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, ChatPermissions
from aiogram.filters import Command
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.redis_conn import redis
from bot.database.session import get_session
from bot.database.models import ScammerTracker
from bot.utils.logger import send_formatted_log

logger = logging.getLogger(__name__)

admin_log_router = Router()


async def check_admin_rights_in_channel(bot: Bot, user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤
        log_channel_id = int(os.getenv("LOG_CHANNEL_ID", "0"))
        if log_channel_id == 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        member = await bot.get_chat_member(log_channel_id, user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        return False


@admin_log_router.callback_query(F.data.startswith("admin_allow:"))
async def handle_admin_allow(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ
        if not await check_admin_rights_in_channel(callback.bot, callback.from_user.id, 0):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤", show_alert=True)
            return

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = callback.data.split(":")
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        target_user_id = int(parts[1])
        chat_id = int(parts[2])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        await redis.setex(f"admin_allow:{target_user_id}:{chat_id}", 300, "1")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            callback.message.text + f"\n\n‚úÖ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name}</b>",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", show_alert=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        try:
            log_message = (
                f"‚úÖ #–ê–î–ú–ò–ù_–†–ê–ó–†–ï–®–ò–õ_–î–û–°–¢–£–ü üü¢\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={target_user_id}'>id{target_user_id}</a> [{target_user_id}]\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {chat_id}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href='tg://user?id={callback.from_user.id}'>{callback.from_user.first_name}</a> [{callback.from_user.id}]\n"
                f"#id{target_user_id} #–∞–¥–º–∏–Ω_–¥–µ–π—Å—Ç–≤–∏–µ"
            )
            await send_formatted_log(log_message)
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {log_error}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ admin_allow: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@admin_log_router.callback_query(F.data.startswith("admin_mute:"))
async def handle_admin_mute(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–º—É—Ç–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ
        if not await check_admin_rights_in_channel(callback.bot, callback.from_user.id, 0):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤", show_alert=True)
            return

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = callback.data.split(":")
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        target_user_id = int(parts[1])
        chat_id = int(parts[2])

        # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target_user_id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=datetime.now() + timedelta(days=366 * 10)  # 10 –ª–µ—Ç
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                callback.message.text + f"\n\nüîá <b>–ó–∞–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name}</b>",
                parse_mode="HTML"
            )
            
            await callback.answer("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—å—é—á–µ–Ω", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            try:
                result = await session.execute(
                    select(ScammerTracker).where(
                        ScammerTracker.user_id == target_user_id,
                        ScammerTracker.chat_id == chat_id
                    )
                )
                record = result.scalar_one_or_none()
                
                if record:
                    record.scammer_level = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                    record.is_scammer = True
                    record.notes = f"–ó–∞–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name} —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤"
                    record.updated_at = datetime.utcnow()
                    await session.commit()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_record = ScammerTracker(
                        user_id=target_user_id,
                        chat_id=chat_id,
                        violation_type="admin_mute_via_logs",
                        violation_count=1,
                        is_scammer=True,
                        scammer_level=5,
                        first_violation_at=datetime.utcnow(),
                        last_violation_at=datetime.utcnow(),
                        notes=f"–ó–∞–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name} —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤"
                    )
                    session.add(new_record)
                    await session.commit()
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {db_error}")
                await session.rollback()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            try:
                log_message = (
                    f"üîá #–ê–î–ú–ò–ù_–ó–ê–ú–£–¢–ò–õ üö´\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={target_user_id}'>id{target_user_id}</a> [{target_user_id}]\n"
                    f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {chat_id}\n"
                    f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href='tg://user?id={callback.from_user.id}'>{callback.from_user.first_name}</a> [{callback.from_user.id}]\n"
                    f"#id{target_user_id} #–∞–¥–º–∏–Ω_–¥–µ–π—Å—Ç–≤–∏–µ #–º—É—Ç"
                )
                await send_formatted_log(log_message)
            except Exception as log_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º—É—Ç–∞: {log_error}")
                
        except Exception as mute_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {mute_error}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ admin_mute: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º—É—Ç


@admin_log_router.message(Command("log_admin_check"))
async def check_log_admin_rights(message, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
    try:
        user_id = message.from_user.id
        is_admin = await check_admin_rights_in_channel(message.bot, user_id, 0)
        
        if is_admin:
            await message.answer("‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤")
