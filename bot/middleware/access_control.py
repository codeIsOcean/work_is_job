# middleware/access_control.py
import logging
import os
from typing import Callable, Dict, Any, Awaitable, Set
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
try:
    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    from bot.config import ADMIN_IDS as CONFIG_ADMIN_IDS  # type: ignore
except Exception:
    CONFIG_ADMIN_IDS = []

logger = logging.getLogger(__name__)

# ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)
ALLOWED_USER_ID = 619924982

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
# 1) –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
# 2) –∏–∑ –æ–±—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (bot.config.ADMIN_IDS)
# 3) –ø–æ username –∏–∑ ADMIN_USERNAMES (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)

def _load_allowed_ids() -> Set[int]:
    ids: Set[int] = set()
    ids.add(ALLOWED_USER_ID)
    # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞)
    ids.add(5289489605)
    # –ò–∑ bot.config
    try:
        ids.update(int(i) for i in CONFIG_ADMIN_IDS or [])
    except Exception:
        pass
    # –ò–∑ ENV
    raw = os.getenv("ADMIN_IDS", "").strip()
    if raw:
        for part in raw.split(","):
            part = part.strip()
            if part.isdigit():
                ids.add(int(part))
    return ids

def _load_allowed_usernames() -> Set[str]:
    names: Set[str] = set()
    raw = os.getenv("ADMIN_USERNAMES", "")
    if raw:
        for part in raw.split(","):
            name = part.strip().lstrip("@").lower()
            if name:
                names.add(name)
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @zetabeta90 –ø–æ –∑–∞–ø—Ä–æ—Å—É
    names.add("zetabeta90")
    return names

ALLOWED_USER_IDS: Set[int] = _load_allowed_ids()
ALLOWED_USERNAMES: Set[str] = _load_allowed_usernames()

# –§–ª–∞–≥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
ACCESS_CONTROL_ENABLED = True

class AccessControlMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery | ChatMemberUpdated,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        user_id = None
        
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        elif isinstance(event, ChatMemberUpdated):
            user_id = event.from_user.id
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user_id is None:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
            return await handler(event, data)
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not ACCESS_CONTROL_ENABLED:
            logger.info(f"üîì –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return await handler(event, data)
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Ç.–¥.)
        if isinstance(event, ChatMemberUpdated):
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∫–∞—Å–∞–µ—Ç—Å—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            try:
                bot_info = await event.bot.me()
                if event.new_chat_member.user.id == bot_info.id:
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")
                    return await handler(event, data)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–ø–æ ID –∏–ª–∏ username)
        username = None
        first_name = None
        if isinstance(event, Message):
            username = event.from_user.username
            first_name = event.from_user.first_name
        elif isinstance(event, CallbackQuery):
            username = event.from_user.username
            first_name = event.from_user.first_name
        elif isinstance(event, ChatMemberUpdated):
            username = event.from_user.username
            first_name = event.from_user.first_name

        username_norm = (username or "").lstrip("@").lower()

        if (user_id not in ALLOWED_USER_IDS) and (username_norm not in ALLOWED_USERNAMES):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            username = username or "no_username"
            first_name = first_name or "no_name"
            
            logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}, {first_name})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
            if isinstance(event, Message):
                await event.answer(
                    "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @texas_dev –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                    parse_mode="HTML"
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @texas_dev",
                    show_alert=True
                )
            
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        logger.debug(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return await handler(event, data)


def enable_access_control():
    """–í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞"""
    global ACCESS_CONTROL_ENABLED
    ACCESS_CONTROL_ENABLED = True
    logger.info("üîí –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–µ–Ω")


def disable_access_control():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞"""
    global ACCESS_CONTROL_ENABLED
    ACCESS_CONTROL_ENABLED = False
    logger.info("üîì –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω")


def add_allowed_user(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)"""
    # –ü–æ–∫–∞ —á—Ç–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
    logger.info("‚ÑπÔ∏è –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
