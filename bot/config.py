import os
from dotenv import load_dotenv
from typing import List, Optional

# –í—Å–µ–≥–¥–∞ –∏—â–µ–º .env –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ .env —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if ENVIRONMENT == "production":
    env_file = ".env.prod"
elif ENVIRONMENT == "testing":
    env_file = ".env.test"
else:
    env_file = ".env.dev"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ENV_PATH (–¥–ª—è Docker)
env_path = os.getenv("ENV_PATH")
if not env_path:
    env_path = os.path.join(BASE_DIR, env_file)

print(f"üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ: {ENVIRONMENT}")
print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ env –∏–∑: {env_path}")
print(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(env_path)}")
print(f"üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(dotenv_path=env_path)

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")
raw_admin_ids = os.getenv("ADMIN_IDS", "")
ADMIN_IDS: List[int] = [int(x.strip()) for x in raw_admin_ids.split(",") if x.strip().isdigit()]

# Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() == "true"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_PORT = int(os.getenv("WEBHOOK_PORT", "8080"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "5"))
DB_MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "10"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG = os.getenv("DEBUG", "false").lower() == "true"
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECRET_KEY = os.getenv("SECRET_KEY", "default_secret_key")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")

# Rate limiting
RATE_LIMIT_ENABLED = os.getenv("RATE_LIMIT_ENABLED", "true").lower() == "true"
RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", "30"))
RATE_LIMIT_WINDOW = int(os.getenv("RATE_LIMIT_WINDOW", "60"))

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
ENABLE_METRICS = os.getenv("ENABLE_METRICS", "false").lower() == "true"
METRICS_PORT = int(os.getenv("METRICS_PORT", "9090"))

# SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SSL_CERT_PATH = os.getenv("SSL_CERT_PATH", "")
SSL_KEY_PATH = os.getenv("SSL_KEY_PATH", "")

# Backup –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BACKUP_ENABLED = os.getenv("BACKUP_ENABLED", "false").lower() == "true"
BACKUP_SCHEDULE = os.getenv("BACKUP_SCHEDULE", "0 2 * * *")
BACKUP_RETENTION_DAYS = int(os.getenv("BACKUP_RETENTION_DAYS", "30"))

# –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
print(f"‚úÖ BOT_TOKEN: {'*' * (len(BOT_TOKEN) - 4) + BOT_TOKEN[-4:] if BOT_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
print(f"‚úÖ DATABASE_URL: {DATABASE_URL[:20]}..." if DATABASE_URL else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
print(f"‚úÖ LOG_CHANNEL_ID: {LOG_CHANNEL_ID}")
print(f"‚úÖ ADMIN_IDS: {ADMIN_IDS}")
print(f"‚úÖ USE_WEBHOOK: {USE_WEBHOOK}")
print(f"‚úÖ ENVIRONMENT: {ENVIRONMENT}")
print(f"‚úÖ DEBUG: {DEBUG}")
print(f"‚úÖ LOG_LEVEL: {LOG_LEVEL}")

