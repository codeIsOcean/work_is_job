import logging
import os
import aiohttp
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")


class TelegramLogHandler(logging.Handler):
    def __init__(self, level=logging.INFO):
        super().__init__(level)

    async def send_log(self, message: str):
        if not BOT_TOKEN or not LOG_CHANNEL_ID:
            print("‚ùó BOT_TOKEN –∏–ª–∏ LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return

        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": LOG_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }

        async with aiohttp.ClientSession() as session:
            try:
                resp = await session.post(url, data=payload)
                if resp.status != 200:
                    text = await resp.text()
                    print(f"‚ùå Telegram API Error: {resp.status} ‚Äî {text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")

    def emit(self, record):
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ formatter)
            if self.formatter:
                timestamp = self.formatter.formatTime(record, "%Y-%m-%d %H:%M:%S")
            else:
                # –ï—Å–ª–∏ formatter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                timestamp = logging.Formatter().formatTime(record, "%Y-%m-%d %H:%M:%S")

            level = record.levelname
            emojis = {
                "DEBUG": "üîç",
                "INFO": "üì¢",
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "‚ùó",
                "CRITICAL": "üî•"
            }
            icon = emojis.get(level, "üìù")

            # üí¨ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            message = (
                f"{icon} {level} | {timestamp}\n"
                f"{record.getMessage()}"
            )

            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram –ª–æ–≥–∏ - —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ send_formatted_log
            # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ Telegram
            pass

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:", e)


# ==== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ò –î–õ–Ø TELEGRAM ====

async def send_formatted_log(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –≤ Telegram"""
    if not BOT_TOKEN or not LOG_CHANNEL_ID:
        print("‚ùó BOT_TOKEN –∏–ª–∏ LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": LOG_CHANNEL_ID,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }

    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.post(url, data=payload)
            if resp.status != 200:
                text = await resp.text()
                print(f"‚ùå Telegram API Error: {resp.status} ‚Äî {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")


def log_new_user(username, user_id, chat_name, chat_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ username —Å—Ç—Ä–æ–∫–æ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç None)
    user_display = f"<a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a>"

    msg = (
        f"‚ûï #–ù–û–í–´–ô_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ üü¢\n"
        f"‚Ä¢ –ö—Ç–æ: {user_display} [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
    )

    if message_id:
        msg += f"‚Ä¢ üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (http://t.me/c/{str(chat_id).replace('-100', '')}/{message_id})\n"

    msg += f"#id{user_id}"

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_captcha_solved(username, user_id, chat_name, chat_id, method="–ö–Ω–æ–ø–∫–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏"""
    msg = (
        f"‚úÖ #–ö–ê–ü–ß–ê_–†–ï–®–ï–ù–ê üü¢\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"‚Ä¢ –ú–µ—Ç–æ–¥: {method}\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_user_banned(username, user_id, chat_name, chat_id, reason="–°–ø–∞–º"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = (
        f"üö´ #–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨_–ó–ê–ë–ê–ù–ï–ù üî¥\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {chat_name}: {reason}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_join_request(username, user_id, chat_name, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    msg = (
        f"üì¨ #–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï üîµ\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {username} –≤ –≥—Ä—É–ø–ø—É {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_captcha_failed(username, user_id, chat_name, chat_id, method="–ö–Ω–æ–ø–∫–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
    msg = (
        f"üì¨ #–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï üî¥ #–∫–∞–ø—á–∞–Ω–µ—Ä–µ—à–µ–Ω–∞\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id} #–ö–ê–ü–ß–ê_–ù–ï_–£–î–ê–õ–ê–°–¨ #{method}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ö–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}, –º–µ—Ç–æ–¥: {method}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))

def log_captcha_sent(username, user_id, chat_name, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    msg = (
        f"üì¢ #–ö–ê–ü–ß–ê_–û–¢–ü–†–ê–í–õ–ï–ù–ê üü°\n"
        f"‚Ä¢ –ö–æ–º—É: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_telegram_error(error_message, module_name="–ù–µ —É–∫–∞–∑–∞–Ω"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ Telegram API"""
    msg = (
        f"‚ùå #–û–®–ò–ë–ö–ê_TELEGRAM üî¥\n"
        f"‚Ä¢ –ú–æ–¥—É–ª—å: {module_name}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n"
        f"#error #telegram_api"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –û—à–∏–±–∫–∞ Telegram API: {error_message}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_captcha_attempt_with_buttons(username, user_id, chat_name, chat_id, risk_score, risk_factors, method="–ö–∞–ø—á–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_display = f"<a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a>"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    if risk_score >= 80:
        risk_level = "üö® –í–´–°–û–ö–ò–ô"
        risk_color = "üî¥"
    elif risk_score >= 50:
        risk_level = "‚ö†Ô∏è –°–†–ï–î–ù–ò–ô"
        risk_color = "üü°"
    elif risk_score >= 30:
        risk_level = "‚ÑπÔ∏è –£–ú–ï–†–ï–ù–ù–´–ô"
        risk_color = "üü†"
    else:
        risk_level = "‚úÖ –ù–ò–ó–ö–ò–ô"
        risk_color = "üü¢"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 3)
    factors_text = ", ".join(risk_factors[:3])
    if len(risk_factors) > 3:
        factors_text += f" –∏ –µ—â–µ {len(risk_factors) - 3}"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
    if chat_id < 0:
        # –î–ª—è –≥—Ä—É–ø–ø —É–±–∏—Ä–∞–µ–º -100 –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        group_link_id = str(chat_id).replace('-100', '')
        group_link = f"https://t.me/c/{group_link_id}"
    else:
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
        group_link = f"https://t.me/c/{chat_id}"
    
    msg = (
        f"üß© #–ü–û–ü–´–¢–ö–ê_–ö–ê–ü–ß–ò {risk_color}\n"
        f"‚Ä¢ –ö—Ç–æ: {user_display} [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='{group_link}'>{chat_name}</a> [{chat_id}]\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level} ({risk_score}/100)\n"
        f"‚Ä¢ –§–∞–∫—Ç–æ—Ä—ã: {factors_text}\n"
        f"‚Ä¢ –ú–µ—Ç–æ–¥: {method}\n"
        f"#id{user_id} #–∫–∞–ø—á–∞ #—Ä–∏—Å–∫{risk_score}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–ø—á–∏ –æ—Ç {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}, —Ä–∏—Å–∫: {risk_score}/100")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
    asyncio.create_task(send_captcha_attempt_log_with_buttons(msg, user_id, chat_id, risk_score))


async def send_captcha_attempt_log_with_buttons(message: str, user_id: int, chat_id: int, risk_score: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –ø–æ–ø—ã—Ç–∫–µ –∫–∞–ø—á–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not BOT_TOKEN or not LOG_CHANNEL_ID:
        print("‚ùó BOT_TOKEN –∏–ª–∏ LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not user_id or not chat_id:
        print(f"‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id={user_id}, chat_id={chat_id}")
        return

    import aiohttp
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                    callback_data=f"admin_allow:{int(user_id)}:{int(chat_id)}"
                ),
                InlineKeyboardButton(
                    text="üîá –ó–∞–º—É—Ç–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞",
                    callback_data=f"admin_mute:{int(user_id)}:{int(chat_id)}"
                )
            ]
        ])
    except (ValueError, TypeError) as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
        return
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º—É—Ç

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": LOG_CHANNEL_ID,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
        "reply_markup": keyboard.model_dump_json()
    }

    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.post(url, json=payload)
            if resp.status != 200:
                text = await resp.text()
                print(f"‚ùå Telegram API Error: {resp.status} ‚Äî {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram: {e}")