import asyncio
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
# –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä timeout
from aiogram.client.session.aiohttp import AiohttpSession

#from bot.handlers import handlers_router
from bot.services.redis_conn import test_connection

from bot.config import BOT_TOKEN, USE_WEBHOOK
from bot.database.session import engine, async_session
from bot.database.models import Base
from bot.middleware.db_session import DbSessionMiddleware  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç DbSessionMiddleware
from bot.handlers import handlers_router

# –õ–æ–≥–≥–µ—Ä
import logging
from bot.utils.logger import TelegramLogHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram
telegram_handler = TelegramLogHandler(level=logging.INFO)
telegram_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
telegram_handler.setFormatter(telegram_formatter)
logger.addHandler(telegram_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ aiogram - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å
for logger_name in ("aiogram", "aiogram.dispatcher", "aiogram.event"):
    log = logging.getLogger(logger_name)
    log.addHandler(console_handler)
    log.propagate = False

# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—Ä–æ–ª—è


# –≥–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞
async def main():
    logging.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage
    try:
        # –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
        await test_connection()
        redis_url = f"redis://{':' + REDIS_PASSWORD + '@' if REDIS_PASSWORD else ''}{REDIS_HOST}:{REDIS_PORT}"
        storage = RedisStorage.from_url(redis_url)
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage
        from aiogram.fsm.storage.memory import MemoryStorage
        storage = MemoryStorage()
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        logging.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)")

    # ‚úÖ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ .env
    session = AiohttpSession(timeout=60.0)
    bot = Bot(token=BOT_TOKEN, session=session)
    # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ sessionmaker
    dp = Dispatcher(storage=storage)

    # ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware ‚Äî –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –∫–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    dp.update.middleware(DbSessionMiddleware(async_session))

    # ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª
    dp.include_router(handlers_router)
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω: {handlers_router}")
    
    # ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: webhook –∏–ª–∏ polling
    if USE_WEBHOOK:
        logging.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º webhook
        # –ü–µ—Ä–µ–¥–∞–µ–º bot –∏ dp —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ handlers
        from bot.webhook import run_webhook
        await run_webhook(bot=bot, dp=dp)
    else:
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

