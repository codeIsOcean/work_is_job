# bot/handlers/bot_activity_handlers/bot_added_handler_logic.py
import logging
from typing import Optional

from aiogram import Bot
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.database.models import Group, GroupUsers, User, UserGroup
from bot.database.session import get_session

logger = logging.getLogger(__name__)


async def safe_send(bot: Bot, chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (403/400 –∏ —Ç.–¥.), –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∞–¥–∞–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Message –∏–ª–∏ None.
    """
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.exception(f"[SEND_MESSAGE_FAIL] chat_id={chat_id} error={e}")
        return None


async def is_user_group_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã.
    """
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR)
    except Exception:
        logger.exception(f"[CHECK_ADMIN_FAIL] chat_id={chat_id} user_id={user_id}")
        return False


async def build_private_chat_link(bot: Bot) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –≤–∏–¥–∞ https://t.me/<username>.
    –ï—Å–ª–∏ username –Ω–µ—Ç (–±–æ—Ç —Å–∫—Ä—ã—Ç), –≤–µ—Ä–Ω—ë—Ç None.
    """
    bot_info = await bot.me()
    if bot_info.username:
        return f"https://t.me/{bot_info.username}"
    return None


async def sync_group_and_admins(chat_id: int, title: str, bot_id: int, bot: Bot):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∏ –∞–¥–º–∏–Ω–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    async with get_session() as session:
        try:
            # üè† –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            stmt = select(Group).where(Group.chat_id == chat_id)
            result = await session.execute(stmt)
            existing_group = result.scalar_one_or_none()

            if existing_group:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_group.title = title
                existing_group.bot_id = bot_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                group = Group(
                    chat_id=chat_id,
                    title=title,
                    creator_user_id=None,
                    bot_id=bot_id
                )
                session.add(group)

            # ü§ñ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot_me = await bot.me()
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–æ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ User, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            stmt = select(User).where(User.user_id == bot_me.id)
            result = await session.execute(stmt)
            existing_bot_in_users = result.scalar_one_or_none()
            
            if not existing_bot_in_users:
                bot_user_record = User(
                    user_id=bot_me.id,
                    username=bot_me.username,
                    full_name=bot_me.full_name,
                    is_bot=True
                )
                session.add(bot_user_record)
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ GroupUsers
            stmt = select(GroupUsers).where(
                GroupUsers.user_id == bot_me.id,
                GroupUsers.chat_id == chat_id
            )
            result = await session.execute(stmt)
            existing_bot_user = result.scalar_one_or_none()

            if existing_bot_user:
                existing_bot_user.username = bot_me.username
                existing_bot_user.is_admin = True
            else:
                bot_user = GroupUsers(
                    user_id=bot_me.id,
                    chat_id=chat_id,
                    username=bot_me.username,
                    is_admin=True
                )
                session.add(bot_user)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ UserGroup –¥–ª—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            stmt = select(UserGroup).where(
                UserGroup.user_id == bot_me.id,
                UserGroup.group_id == chat_id
            )
            result = await session.execute(stmt)
            existing_bot_user_group = result.scalar_one_or_none()

            if not existing_bot_user_group:
                bot_user_group = UserGroup(
                    user_id=bot_me.id,
                    group_id=chat_id
                )
                session.add(bot_user_group)

            # üë• –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
            admins = await bot.get_chat_administrators(chat_id)
            admin_count = 0

            for admin in admins:
                user = admin.user

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É User
                stmt = select(User).where(User.user_id == user.id)
                result = await session.execute(stmt)
                existing_user = result.scalar_one_or_none()

                if existing_user:
                    existing_user.username = user.username
                    existing_user.full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                else:
                    new_user = User(
                        user_id=user.id,
                        username=user.username,
                        full_name=f"{user.first_name or ''} {user.last_name or ''}".strip()
                    )
                    session.add(new_user)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥—Ä—É–ø–ø–∞ –≤ GroupUsers
                is_creator = (admin.status == ChatMemberStatus.CREATOR)
                stmt = select(GroupUsers).where(
                    GroupUsers.user_id == user.id,
                    GroupUsers.chat_id == chat_id
                )
                result = await session.execute(stmt)
                existing_group_user = result.scalar_one_or_none()

                if existing_group_user:
                    existing_group_user.username = user.username
                    existing_group_user.first_name = user.first_name
                    existing_group_user.last_name = user.last_name
                    existing_group_user.is_admin = True
                    existing_group_user.is_creator = is_creator
                else:
                    group_user = GroupUsers(
                        user_id=user.id,
                        chat_id=chat_id,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name,
                        is_admin=True,
                        is_creator=is_creator
                    )
                    session.add(group_user)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥—Ä—É–ø–ø–∞ –≤ UserGroup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
                stmt = select(UserGroup).where(
                    UserGroup.user_id == user.id,
                    UserGroup.group_id == chat_id
                )
                result = await session.execute(stmt)
                existing_user_group = result.scalar_one_or_none()

                if not existing_user_group:
                    user_group = UserGroup(
                        user_id=user.id,
                        group_id=chat_id
                    )
                    session.add(user_group)

                admin_count += 1

            await session.commit()
            logger.info(f"[SYNC_GROUP_ADMINS] chat_id={chat_id} title='{title}' admins_count={admin_count}")

        except Exception:
            logger.exception(f"[SYNC_GROUP_ADMINS_FAIL] chat_id={chat_id}")
            await session.rollback()
            raise


async def get_bot_username(bot: Bot) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç username –±–æ—Ç–∞.
    """
    try:
        bot_info = await bot.me()
        return bot_info.username
    except Exception:
        logger.exception("[GET_BOT_USERNAME_FAIL]")
        return None
