# services/new_member_requested_to_join_mute_logic.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot
from aiogram.types import ChatMemberUpdated, ChatPermissions
from aiogram.enums import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert

from bot.services.redis_conn import redis
from bot.database.models import ChatSettings
from bot.database.session import get_session
from bot.services.scammer_tracker_logic import track_captcha_failure

logger = logging.getLogger(__name__)


async def get_mute_new_members_status(chat_id: int, session: AsyncSession = None) -> bool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Redis, –∑–∞—Ç–µ–º –ë–î
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        mute_enabled = await redis.get(f"group:{chat_id}:mute_new_members")
        logger.info(f"üîç [MUTE_STATUS] Redis check –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {mute_enabled}")
        
        if mute_enabled is not None:
            result = mute_enabled == "1"
            logger.info(f"üîç [MUTE_STATUS] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {result}")
            return result
        
        # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        if session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings and hasattr(settings, 'mute_new_members'):
                mute_enabled = "1" if settings.mute_new_members else "0"
                # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                await redis.set(f"group:{chat_id}:mute_new_members", mute_enabled)
                return settings.mute_new_members
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                await redis.set(f"group:{chat_id}:mute_new_members", "0")
                return False
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            async with get_session() as new_session:
                result = await new_session.execute(
                    select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                )
                settings = result.scalar_one_or_none()
                
                if settings and hasattr(settings, 'mute_new_members'):
                    mute_enabled = "1" if settings.mute_new_members else "0"
                    # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                    await redis.set(f"group:{chat_id}:mute_new_members", mute_enabled)
                    return settings.mute_new_members
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                    await redis.set(f"group:{chat_id}:mute_new_members", "0")
                    return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False


async def set_mute_new_members_status(chat_id: int, enabled: bool, session: AsyncSession = None) -> bool:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis –∏ –ë–î
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        redis_value = "1" if enabled else "0"
        await redis.set(f"group:{chat_id}:mute_new_members", redis_value)
        logger.info(f"üîç [MUTE_SET] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {redis_value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings:
                await session.execute(
                    update(ChatSettings)
                    .where(ChatSettings.chat_id == chat_id)
                    .values(mute_new_members=enabled)
                )
            else:
                await session.execute(
                    insert(ChatSettings).values(
                        chat_id=chat_id,
                        mute_new_members=enabled,
                        enable_photo_filter=False,
                        admins_bypass_photo_filter=False,
                        photo_filter_mute_minutes=60
                    )
                )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            async with get_session() as new_session:
                result = await new_session.execute(
                    select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                )
                settings = result.scalar_one_or_none()
                
                if settings:
                    await new_session.execute(
                        update(ChatSettings)
                        .where(ChatSettings.chat_id == chat_id)
                        .values(mute_new_members=enabled)
                    )
                else:
                    await new_session.execute(
                        insert(ChatSettings).values(
                            chat_id=chat_id,
                            mute_new_members=enabled,
                            enable_photo_filter=False,
                            admins_bypass_photo_filter=False,
                            photo_filter_mute_minutes=60
                        )
                    )
                await new_session.commit()
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False


async def mute_unapproved_member(bot: Bot, event: ChatMemberUpdated) -> bool:
    """
    –ù–ï –º—É—Ç–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    –ú—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ manually_mute_on_approval –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä—è–µ—Ç.
    """
    try:
        chat_id = event.chat.id
        user = event.new_chat_member.user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        mute_enabled = await get_mute_new_members_status(chat_id)
        
        if not mute_enabled:
            logger.debug(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        is_approved = getattr(event.new_chat_member, 'is_approved', True)
        
        logger.info(f"üîç Chat member update: user={user.id}, old={old_status}, new={new_status}, approved={is_approved}")
        
        # –ù–ï –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –º—É—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –º—É—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º")
        
        return False
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ chat member update: {str(e)}")
        return False


# –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mute_manually_approved_member_logic –Ω–∏–∂–µ


async def create_mute_settings_keyboard(chat_id: int, session: AsyncSession = None) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    mute_enabled = await get_mute_new_members_status(chat_id, session)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
    from bot.services.groups_settings_in_private_logic import get_global_mute_status
    global_mute_status = await get_global_mute_status(session)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –ò–õ–ò –ª–æ–∫–∞–ª—å–Ω—ã–π)
    overall_mute_status = global_mute_status or mute_enabled
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º—É—Ç–∞
    if global_mute_status:
        enable_text = "‚úì –í–∫–ª—é—á–µ–Ω üåç (–≥–ª–æ–±–∞–ª—å–Ω–æ)"
        disable_text = "–û—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ"
    else:
        enable_text = "‚úì –í–∫–ª—é—á–∏—Ç—å" if mute_enabled else "–í–∫–ª—é—á–∏—Ç—å"
        disable_text = "‚úì –í—ã–∫–ª—é—á–∏—Ç—å" if not mute_enabled else "–í—ã–∫–ª—é—á–∏—Ç—å"
    
    keyboard_data = {
        "buttons": [
            [
                {"text": enable_text, "callback_data": f"mute_settings:enable:{chat_id}"},
                {"text": disable_text, "callback_data": f"mute_settings:disable:{chat_id}"}
            ],
            [{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back_to_groups"}]
        ],
        "status": overall_mute_status  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    }
    
    return keyboard_data


async def get_mute_settings_text(status: bool = False, global_mute: bool = False) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    if global_mute:
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ üåç (–≥–ª–æ–±–∞–ª—å–Ω–æ)"
        description = "–ú—É—Ç –≤–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø. –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –≤–ª–∏—è—é—Ç."
    else:
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if status else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        description = "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤."
    
    return (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É—Ç\n"
        f"‚Ä¢ –ú—É—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 10 –ª–µ—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}\n\n"
        f"{description}"
    )


async def get_mute_settings_menu(callback):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = callback.from_user.id
    logger.info(f"üîç [MUTE_SERVICE] –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = await redis.hgetall(f"user:{user_id}")
    logger.info(f"üîç [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Redis: {user_keys}")
    
    group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.info(f"üîç [MUTE_SERVICE] Group ID –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {group_id}")

    if not group_id:
        logger.error(f"‚ùå [MUTE_SERVICE] –ù–ï –ù–ê–ô–î–ï–ù group_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.error(f"‚ùå [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_keys}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å' –≤ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    group_id = int(group_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ Redis
    mute_enabled = await redis.get(f"group:{group_id}:mute_new_members")

    # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    if mute_enabled is None:
        async with get_session() as session:
            result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == group_id))
            settings = result.scalar_one_or_none()

            if settings and hasattr(settings, 'mute_new_members'):
                mute_enabled = "1" if settings.mute_new_members else "0"
                # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                await redis.set(f"group:{group_id}:mute_new_members", mute_enabled)
            else:
                mute_enabled = "0"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ

    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if mute_enabled == "1" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    enable_text = "‚úì –í–∫–ª—é—á–∏—Ç—å" if mute_enabled == "1" else "–í–∫–ª—é—á–∏—Ç—å"
    disable_text = "‚úì –í—ã–∫–ª—é—á–∏—Ç—å" if mute_enabled != "1" else "–í—ã–∫–ª—é—á–∏—Ç—å"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=enable_text, callback_data="mute_new_members:enable"),
            InlineKeyboardButton(text=disable_text, callback_data="mute_new_members:disable")
        ],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_groups")]
    ])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –≤–º–µ—Å—Ç–æ answer –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É—Ç\n"
        f"‚Ä¢ –ú—É—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 10 –ª–µ—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤."
    )

    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º callback.answer() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handler


async def enable_mute_for_group(callback):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    user_id = callback.from_user.id
    logger.info(f"üîç [MUTE_SERVICE] –í–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = await redis.hgetall(f"user:{user_id}")
    logger.info(f"üîç [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Redis: {user_keys}")
    
    group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.info(f"üîç [MUTE_SERVICE] Group ID –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {group_id}")

    if not group_id:
        logger.error(f"‚ùå [MUTE_SERVICE] –ù–ï –ù–ê–ô–î–ï–ù group_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞")
        logger.error(f"‚ùå [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_keys}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    group_id = int(group_id)

    await redis.set(f"group:{group_id}:mute_new_members", "1")

    async with get_session() as session:
        result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == group_id))
        settings = result.scalar_one_or_none()

        if settings:
            await session.execute(
                update(ChatSettings).where(ChatSettings.chat_id == group_id).values(
                    mute_new_members=True
                )
            )
        else:
            await session.execute(
                insert(ChatSettings).values(
                    chat_id=group_id,
                    mute_new_members=True,
                    enable_photo_filter=False,
                    admins_bypass_photo_filter=False,
                    photo_filter_mute_minutes=60
                )
            )

        await session.commit()
        logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω –º—É—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º callback.answer() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handler
    await get_mute_settings_menu(callback)


async def disable_mute_for_group(callback):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    user_id = callback.from_user.id
    logger.info(f"üîç [MUTE_SERVICE] –í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = await redis.hgetall(f"user:{user_id}")
    logger.info(f"üîç [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Redis: {user_keys}")
    
    group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.info(f"üîç [MUTE_SERVICE] Group ID –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {group_id}")

    if not group_id:
        logger.error(f"‚ùå [MUTE_SERVICE] –ù–ï –ù–ê–ô–î–ï–ù group_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞")
        logger.error(f"‚ùå [MUTE_SERVICE] –í—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_keys}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    group_id = int(group_id)

    # –í—ã–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –≤ Redis
    await redis.set(f"group:{group_id}:mute_new_members", "0")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
    async with get_session() as session:
        result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == group_id))
        settings = result.scalar_one_or_none()

        if settings:
            await session.execute(
                update(ChatSettings).where(ChatSettings.chat_id == group_id).values(
                    mute_new_members=False
                )
            )
        else:
            await session.execute(
                insert(ChatSettings).values(
                    chat_id=group_id,
                    mute_new_members=False,
                    enable_photo_filter=False,
                    admins_bypass_photo_filter=False,
                    photo_filter_mute_minutes=60
                )
            )

        await session.commit()
        logger.info(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω –º—É—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º callback.answer() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handler
    await get_mute_settings_menu(callback)


async def mute_unapproved_member_logic(event):
    """–õ–æ–≥–∏–∫–∞ –º—É—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    from aiogram.types import ChatPermissions
    from datetime import datetime, timedelta
    import asyncio
    
    try:
        if getattr(event.new_chat_member, 'is_approved', True):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        chat_id = event.chat.id
        mute_enabled = await redis.get(f"group:{chat_id}:mute_new_members")

        # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        if mute_enabled is None:
            async with get_session() as session:
                result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == chat_id))
                settings = result.scalar_one_or_none()

                if settings and hasattr(settings, 'mute_new_members'):
                    mute_enabled = "1" if settings.mute_new_members else "0"
                    await redis.set(f"group:{chat_id}:mute_new_members", mute_enabled)
                else:
                    mute_enabled = "0"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ

        if mute_enabled != "1":
            logger.debug(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        user = event.new_chat_member.user

        await event.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            ),
            until_date=datetime.now() + timedelta(days=366 * 10)  # 10 –ª–µ—Ç
        )

        await asyncio.sleep(1)

        try:
            await event.bot.send_message(
                chat_id=event.chat.id,
                text=f"üö´ –°–ø–∞–º–µ—Ä @{user.username or user.id} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} (ID: {user.id}) –∑–∞–º—å—é—á–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {event.chat.id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {event.chat.id}: {str(e)}")

    except Exception as e:
        logger.error(f"üí• MUTE ERROR: {str(e)}")


async def mute_manually_approved_member_logic(event):
    """–õ–æ–≥–∏–∫–∞ –º—É—Ç–∞ –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    from aiogram.types import ChatPermissions
    from datetime import datetime, timedelta
    import asyncio
    
    try:
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        user = event.new_chat_member.user
        chat = event.chat

        logger.info(f"üîç [MUTE_LOGIC] ===== –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò mute_manually_approved_member_logic =====")
        logger.info(f"üîç [MUTE_LOGIC] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name or user.id} [{user.id}]")
        logger.info(f"üîç [MUTE_LOGIC] –ß–∞—Ç: {chat.title} [{chat.id}]")
        logger.info(f"üîç [MUTE_LOGIC] –°—Ç–∞—Ç—É—Å: {old_status} -> {new_status}")
        logger.info(f"üîç [MUTE_LOGIC] –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {event.date}")

        if old_status in ("left", "kicked") and new_status == "member":
            logger.info(f"üîç [MUTE_LOGIC] ‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª member –∏–∑ {old_status}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            mute_enabled = await redis.get(f"group:{chat.id}:mute_new_members")
            logger.info(f"üîç [MUTE_LOGIC] –°—Ç–∞—Ç—É—Å –º—É—Ç–∞ –≤ Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat.id}: {mute_enabled}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º—É—Ç–∞
            global_mute_enabled = await redis.get("global_mute_enabled")
            logger.info(f"üîç [MUTE_LOGIC] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –≤–∫–ª—é—á–µ–Ω: {global_mute_enabled}")
            
            # –ú—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –ò–õ–ò –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            should_mute = (global_mute_enabled == "1") or (mute_enabled == "1")
            
            if not should_mute:
                logger.info(f"üîç [MUTE_LOGIC] ‚ùå –ú—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω (–≥–ª–æ–±–∞–ª—å–Ω–æ: {global_mute_enabled}, –¥–ª—è –≥—Ä—É–ø–ø—ã: {mute_enabled}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —á–µ—Ä–µ–∑ –∫–∞–ø—á—É
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï–î–ê–í–ù–û –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –Ω–µ –º—É—Ç–∏–º
            captcha_passed = await redis.get(f"captcha_passed:{user.id}:{chat.id}")
            captcha_ttl = await redis.ttl(f"captcha_passed:{user.id}:{chat.id}")
            is_recent_captcha = captcha_passed and captcha_ttl > 3000  # –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ (–±–æ–ª—å—à–µ 50 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
            
            logger.info(f"üîç [MUTE_LOGIC] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏: passed={captcha_passed}, ttl={captcha_ttl}, recent={is_recent_captcha}")
            
            if is_recent_captcha:
                logger.info(f"üîç [MUTE_LOGIC] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ù–ï–î–ê–í–ù–û –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –ù–ï —Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º, —Ä—É—á–Ω–æ–π –º—É—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è")
                return
            
            # –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –í–°–ï!
            if global_mute_enabled == "1":
                logger.info(f"üîç [MUTE_LOGIC] üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—É—Ç –≤–∫–ª—é—á–µ–Ω - –º—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (—Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º)")
            elif mute_enabled == "1":
                logger.info(f"üîç [MUTE_LOGIC] üîß –õ–æ–∫–∞–ª—å–Ω—ã–π –º—É—Ç –≤–∫–ª—é—á–µ–Ω - –º—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (—Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º)")
            else:
                logger.info(f"üîç [MUTE_LOGIC] ‚ùå –ù–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –º—É—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã - –Ω–µ –º—É—Ç–∏–º")
                return

            logger.info(f"üîç [MUTE_LOGIC] üöÄ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.id}")
            logger.info(f"üîç [MUTE_LOGIC] üìã –°—Ç–∞—Ç—É—Å—ã: global_mute={global_mute_enabled}, group_mute={mute_enabled}")
            logger.info(f"üîç [MUTE_LOGIC] üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            logger.info(f"üîç [MUTE_LOGIC]    - user.id: {user.id}")
            logger.info(f"üîç [MUTE_LOGIC]    - chat.id: {chat.id}")
            logger.info(f"üîç [MUTE_LOGIC]    - old_status: {old_status}")
            logger.info(f"üîç [MUTE_LOGIC]    - new_status: {new_status}")
            logger.info(f"üîç [MUTE_LOGIC]    - event.date: {event.date}")

            try:
                await event.bot.restrict_chat_member(
                    chat_id=chat.id,
                    user_id=user.id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_media_messages=False,
                        can_send_polls=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False,
                        can_change_info=False,
                        can_invite_users=False,
                        can_pin_messages=False
                    ),
                    until_date=datetime.now() + timedelta(days=366 * 10)
                )
                logger.info(f"üîç [MUTE_LOGIC] ‚úÖ API –≤—ã–∑–æ–≤ restrict_chat_member –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                await asyncio.sleep(1)
                logger.info(f"üîç [MUTE_LOGIC] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è")
                
            except Exception as api_error:
                logger.error(f"üîç [MUTE_LOGIC] üí• –û—à–∏–±–∫–∞ API –ø—Ä–∏ –º—É—Ç–µ: {api_error}")
                raise
                
        else:
            logger.info(f"üîç [MUTE_LOGIC] ‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: old={old_status}, new={new_status}")

    except Exception as e:
        logger.error(f"üîç [MUTE_LOGIC] üí• MUTE ERROR: {str(e)}")
        import traceback
        logger.error(f"üîç [MUTE_LOGIC] üí• Traceback: {traceback.format_exc()}")
