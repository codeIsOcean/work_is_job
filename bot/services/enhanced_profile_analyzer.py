"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–∏–æ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime, timezone

from bot.services.account_age_estimator import account_age_estimator
from bot.services.bio_content_analyzer import bio_analyzer

logger = logging.getLogger(__name__)

class EnhancedProfileAnalyzer:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.age_estimator = account_age_estimator
        self.bio_analyzer = bio_analyzer
    
    async def analyze_user_profile_enhanced(self, user_data: dict, bot=None) -> Dict[str, Any]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∏–æ
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        analysis = {
            "is_suspicious": False,
            "reasons": [],
            "risk_score": 0,
            "age_analysis": {},
            "bio_analysis": {},
            "profile_analysis": {}
        }
        
        user_id = user_data.get("id", "unknown")
        
        if user_id == "unknown":
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π user_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")
            analysis["risk_score"] += 20
            analysis["reasons"].append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π user_id")
            return analysis
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID
            age_analysis = self._analyze_account_age(user_id)
            analysis["age_analysis"] = age_analysis
            analysis["risk_score"] += age_analysis["risk_score"]
            
            if age_analysis["is_suspicious"]:
                analysis["is_suspicious"] = True
                analysis["reasons"].extend(age_analysis["reasons"])
            
            # 2. –ê–Ω–∞–ª–∏–∑ –±–∏–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            bio_analysis = await self._analyze_user_bio(user_data, bot)
            analysis["bio_analysis"] = bio_analysis
            analysis["risk_score"] += bio_analysis["risk_score"]
            
            if bio_analysis["is_suspicious"]:
                analysis["is_suspicious"] = True
                analysis["reasons"].extend(bio_analysis["reasons"])
            
            # 3. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            profile_analysis = self._analyze_basic_profile(user_data)
            analysis["profile_analysis"] = profile_analysis
            analysis["risk_score"] += profile_analysis["risk_score"]
            
            if profile_analysis["is_suspicious"]:
                analysis["is_suspicious"] = True
                analysis["reasons"].extend(profile_analysis["reasons"])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
            analysis["risk_score"] = min(analysis["risk_score"], 100)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._log_analysis_results(user_id, analysis)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            analysis["risk_score"] += 20
            analysis["reasons"].append("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")
        
        return analysis
    
    def _analyze_account_age(self, user_id: int) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ user_id
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        """
        try:
            age_info = self.age_estimator.get_detailed_age_info(user_id)
            
            analysis = {
                "is_suspicious": False,
                "reasons": [],
                "risk_score": age_info["risk_score"],
                "age_days": age_info["age_days"],
                "creation_date": age_info["creation_date_str"],
                "risk_label": age_info["risk_label"],
                "risk_description": age_info["risk_description"]
            }
            
            if age_info["risk_score"] >= 60:
                analysis["is_suspicious"] = True
                analysis["reasons"].append(age_info["risk_description"])
            
            logger.info(f"   üìÖ –ê–ù–ê–õ–ò–ó –í–û–ó–†–ê–°–¢–ê –ê–ö–ö–ê–£–ù–¢–ê:")
            logger.info(f"   üìÖ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {age_info['creation_date_str']}")
            logger.info(f"   ‚è∞ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {age_info['age_days']} –¥–Ω–µ–π")
            logger.info(f"   üéØ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {age_info['risk_score']}/100 ({age_info['risk_label']})")
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}: {e}")
            return {
                "is_suspicious": False,
                "reasons": [],
                "risk_score": 10,
                "age_days": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "creation_date": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "risk_label": "unknown",
                "risk_description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"
            }
    
    async def _analyze_user_bio(self, user_data: dict, bot=None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∏–æ —á–µ—Ä–µ–∑ API
            bio_text = ""
            if bot and user_data.get("id"):
                try:
                    user_chat = await bot.get_chat(user_data["id"])
                    if hasattr(user_chat, 'bio') and user_chat.bio:
                        bio_text = user_chat.bio
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('id')}: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–æ
            bio_analysis = self.bio_analyzer.analyze_bio_content(bio_text)
            
            logger.info(f"   üìù –ê–ù–ê–õ–ò–ó –ë–ò–û:")
            if bio_text:
                logger.info(f"   üìù –ë–∏–æ: {bio_text[:100]}{'...' if len(bio_text) > 100 else ''}")
                logger.info(f"   üéØ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {bio_analysis['risk_score']}/100")
                if bio_analysis['categories']:
                    logger.info(f"   ‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(bio_analysis['categories'])}")
                else:
                    logger.info(f"   ‚úÖ –ë–∏–æ –≤ –ø–æ—Ä—è–¥–∫–µ")
            else:
                logger.info(f"   ‚ÑπÔ∏è –ë–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (0 –±–∞–ª–ª–æ–≤)")
            
            return bio_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('id')}: {e}")
            return {
                "is_suspicious": False,
                "reasons": [],
                "risk_score": 0,
                "categories": [],
                "matched_patterns": [],
                "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ"
            }
    
    def _analyze_basic_profile(self, user_data: dict) -> Dict[str, Any]:
        """
        –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        analysis = {
            "is_suspicious": False,
            "reasons": [],
            "risk_score": 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
        if not user_data.get("username"):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username")
            analysis["risk_score"] += 15
            logger.warning(f"   ‚ö†Ô∏è –ù–ï–¢ USERNAME (+15 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ï–°–¢–¨ USERNAME (0 –±–∞–ª–ª–æ–≤)")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º username –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            username = user_data.get("username", "").lower()
            suspicious_patterns = [
                "bot", "admin", "support", "help", "service", "official",
                "test", "demo", "sample", "example", "temp", "tmp"
            ]
            
            for pattern in suspicious_patterns:
                if pattern in username:
                    analysis["is_suspicious"] = True
                    analysis["reasons"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π username —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
                    analysis["risk_score"] += 10
                    logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô USERNAME: —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}' (+10 –±–∞–ª–ª–æ–≤)")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if not user_data.get("first_name"):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è")
            analysis["risk_score"] += 20
            logger.warning(f"   ‚ö†Ô∏è –ù–ï–¢ –ò–ú–ï–ù–ò (+20 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ï–°–¢–¨ –ò–ú–Ø (0 –±–∞–ª–ª–æ–≤)")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            first_name = user_data.get("first_name", "").lower()
            suspicious_names = [
                "bot", "admin", "support", "help", "service", "official",
                "test", "demo", "sample", "example", "temp", "tmp",
                "user", "member", "guest", "anonymous"
            ]
            
            for pattern in suspicious_names:
                if pattern in first_name:
                    analysis["is_suspicious"] = True
                    analysis["reasons"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
                    analysis["risk_score"] += 10
                    logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –ò–ú–Ø: —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}' (+10 –±–∞–ª–ª–æ–≤)")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        language = user_data.get("language_code", "").lower()
        if language not in ["ru", "en", "uk", "be", "kk", "uz", "ky", "tg"]:
            analysis["risk_score"] += 5
            logger.info(f"   ‚ÑπÔ∏è –ù–ï–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –Ø–ó–´–ö: '{language}' (+5 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –Ø–ó–´–ö: '{language}' (0 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if user_data.get("is_bot", False):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
            analysis["risk_score"] += 50
            logger.warning(f"   üö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –ë–û–¢ (+50 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ù–ï –ë–û–¢ (0 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
        if user_data.get("is_premium", False):
            analysis["risk_score"] -= 5  # Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–µ–Ω–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã
            logger.info(f"   ‚≠ê PREMIUM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (-5 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚ÑπÔ∏è –û–ë–´–ß–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (0 –±–∞–ª–ª–æ–≤)")
        
        return analysis
    
    def _log_analysis_results(self, user_id: int, analysis: Dict[str, Any]) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info(f"   üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        logger.info(f"   üéØ –û–±—â–∏–π –±–∞–ª–ª —Ä–∏—Å–∫–∞: {analysis['risk_score']}/100")
        logger.info(f"   üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {analysis['is_suspicious']}")
        
        if analysis['reasons']:
            logger.info(f"   ‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for reason in analysis['reasons']:
                logger.info(f"      - {reason}")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if analysis['age_analysis'].get('risk_score', 0) > 0:
            logger.info(f"   üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {analysis['age_analysis']['risk_score']} –±–∞–ª–ª–æ–≤")
        
        if analysis['bio_analysis'].get('risk_score', 0) > 0:
            logger.info(f"   üìù –ë–∏–æ: {analysis['bio_analysis']['risk_score']} –±–∞–ª–ª–æ–≤")
        
        if analysis['profile_analysis'].get('risk_score', 0) > 0:
            logger.info(f"   üë§ –ü—Ä–æ—Ñ–∏–ª—å: {analysis['profile_analysis']['risk_score']} –±–∞–ª–ª–æ–≤")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
enhanced_profile_analyzer = EnhancedProfileAnalyzer()
