"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—é, —Å–ø–∞–º –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
"""

import re
import logging
from typing import List, Tuple, Dict, Optional

logger = logging.getLogger(__name__)

class BioContentAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        self.drug_patterns = self._load_drug_patterns()
        self.prostitution_patterns = self._load_prostitution_patterns()
        self.spam_patterns = self._load_spam_patterns()
        self.suspicious_patterns = self._load_suspicious_patterns()
    
    def _load_drug_patterns(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤"""
        return [
            # –ù–∞—Ä–∫–æ—Ç–∏–∫–∏
            r'\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–Ω–∞—Ä–∫–æ|–Ω–∞—Ä–∫|–¥–æ–∑–∞|–¥–æ–∑—ã|–¥–æ–∑–∏—Ä–æ–≤–∫–∞)\b',
            r'\b(–∫–æ–∫–∞–∏–Ω|–∫–æ–∫—Å|–∫–æ–∫|–∫–æ–∫–∞)\b',
            r'\b(–≥–µ—Ä–æ–∏–Ω|–≥–µ—Ä|–≥–µ—Ä—ã—á)\b',
            r'\b(–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–∞–º—Ñ|—Å–ø–∏–¥|—Å–∫–æ—Ä–æ—Å—Ç—å)\b',
            r'\b(–º–∞—Ä–∏—Ö—É–∞–Ω–∞|—Ç—Ä–∞–≤–∫–∞|–∫–æ–Ω–æ–ø–ª—è|–≥–∞—à–∏—à|–ø–ª–∞–Ω)\b',
            r'\b(–ª—Å–¥|lsd|–∫–∏—Å–ª–æ—Ç–∞)\b',
            r'\b(—ç–∫—Å—Ç–∞–∑–∏|–º–¥–º–∞|–º–æ–ª–ª–∏)\b',
            r'\b(–º–µ—Ñ–µ–¥—Ä–æ–Ω|–º–µ—Ñ|—Å–æ–ª—å)\b',
            r'\b(—Å–ø–∞–π—Å|–º–∏–∫—Å|–∫—É—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)\b',
            r'\b(—Ç–∞–±–ª–µ—Ç–∫–∏|—Ç–∞–±–ª—ã|–ø–∏–ª—é–ª–∏)\b',
            
            # –°–ª–µ–Ω–≥ –∏ –∫–æ–¥—ã
            r'\b(–±–µ–ª—ã–π|–ø–æ—Ä–æ—à–æ–∫|–ø–æ—Ä–æ—à)\b',
            r'\b(–∫—Ä–∏—Å—Ç–∞–ª–ª|–∫—Ä–∏—Å—Ç–∞–ª–ª—ã)\b',
            r'\b(—à–∏—à–∫–∏|—à–∏—à)\b',
            r'\b(–≥—Ä–∏–±—ã|–≥—Ä–∏–±|–≥—Ä–∏–±–æ—á–∫–∏)\b',
            r'\b(—Ç—Ä–∞–≤–∫–∞|—Ç—Ä–∞–≤—É|—Ç—Ä–∞–≤—ã)\b',
            
            # –î–µ–π—Å—Ç–≤–∏—è
            r'\b(–ø—Ä–æ–¥–∞–º|–ø—Ä–æ–¥–∞—é|–ø—Ä–æ–¥–∞–∂–∞)\b.*\b(–Ω–∞—Ä–∫–æ|–¥–æ–∑–∞|–≤–µ—â–µ—Å—Ç–≤–æ)\b',
            r'\b(–∫—É–ø–∏—Ç—å|–∫—É–ø–ª—é|–ø–æ–∫—É–ø–∫–∞)\b.*\b(–Ω–∞—Ä–∫–æ|–¥–æ–∑–∞|–≤–µ—â–µ—Å—Ç–≤–æ)\b',
            r'\b(–¥–æ—Å—Ç–∞–≤–∫–∞|–¥–æ—Å—Ç–∞–≤–ª—é)\b.*\b(–Ω–∞—Ä–∫–æ|–¥–æ–∑–∞|–≤–µ—â–µ—Å—Ç–≤–æ)\b',
            r'\b(–∑–∞–∫–ª–∞–¥–∫–∞|–∑–∞–∫–ª–∞–¥–∫–∏)\b',
            r'\b(—Ç–æ—Ä–≥|—Ç–æ—Ä–≥–æ–≤–ª—è)\b.*\b(–Ω–∞—Ä–∫–æ|–¥–æ–∑–∞|–≤–µ—â–µ—Å—Ç–≤–æ)\b',
        ]
    
    def _load_prostitution_patterns(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏–∏"""
        return [
            # –ü—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            r'\b(–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫|–ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—è|—ç—Å–∫–æ—Ä—Ç|—ç—Å–∫–æ—Ä—Ç–Ω–∏—Ü–∞)\b',
            r'\b(–∏–Ω—Ç–∏–º|–∏–Ω—Ç–∏–º–Ω—ã–µ|–∏–Ω—Ç–∏–º–∫–∞)\b',
            r'\b(—Å–µ–∫—Å|—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ|—Å–µ–∫—Å-—É—Å–ª—É–≥–∏)\b',
            r'\b(–º–∞—Å—Å–∞–∂|–º–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞)\b.*\b(–∏–Ω—Ç–∏–º|—Å–µ–∫—Å|—ç—Ä–æ—Ç)\b',
            
            # –°–ª–µ–Ω–≥ –∏ –∫–æ–¥—ã
            r'\b(–¥–µ–≤–æ—á–∫–∏|–¥–µ–≤—É—à–∫–∏|–∂–µ–Ω—â–∏–Ω—ã)\b.*\b(–¥–ª—è|–Ω–∞|—É—Å–ª—É–≥–∏)\b',
            r'\b(–≤—Å—Ç—Ä–µ—á–∏|–≤—Å—Ç—Ä–µ—á–∞)\b.*\b(–∏–Ω—Ç–∏–º|—Å–µ–∫—Å|—ç—Ä–æ—Ç)\b',
            r'\b(—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ|—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é)\b',
            r'\b(–¥–æ—Å—É–≥|–¥–æ—Å—É–≥–æ–≤–∞—è)\b',
            r'\b(—Ä–µ–ª–∞–∫—Å|—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è)\b',
            
            # –¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏
            r'\b(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\b.*\b(—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|\$|–µ–≤—Ä–æ|‚Ç¨)\b',
            r'\b(–Ω–æ—á—å|–Ω–æ—á–∏|–Ω–æ—á–µ–π)\b.*\b(—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|\$|–µ–≤—Ä–æ|‚Ç¨)\b',
            r'\b(–≤—ã–µ–∑–¥|–≤—ã–µ–∑–∂–∞—é|–≤—ã–µ–∑–¥–Ω–∞—è)\b',
            r'\b(–æ—Ç–µ–ª—å|–Ω–æ–º–µ—Ä|–∫–≤–∞—Ä—Ç–∏—Ä–∞)\b.*\b(–≤—Å—Ç—Ä–µ—á–∞|—É—Å–ª—É–≥–∏)\b',
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∫–ª–∞–º–∞
            r'\b(–∑–≤–æ–Ω–∏—Ç–µ|–ø–∏—à–∏—Ç–µ|—Ç–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª–µ–≥—Ä–∞–º)\b.*\b(–¥–µ–≤—É—à–∫|–∂–µ–Ω—â–∏–Ω|—É—Å–ª—É–≥–∏)\b',
            r'\b(—Ñ–æ—Ç–æ|—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏|–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ)\b.*\b(–¥–µ–≤—É—à–∫|–∂–µ–Ω—â–∏–Ω|—É—Å–ª—É–≥–∏)\b',
        ]
    
    def _load_spam_patterns(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ø–∞–º–∞"""
        return [
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∏—Ä–∞–º–∏–¥—ã
            r'\b(–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å|–¥–æ—Ö–æ–¥)\b.*\b(–±–µ–∑|–ª–µ–≥–∫–æ|–±—ã—Å—Ç—Ä–æ)\b',
            r'\b(–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏|–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π|–≤–ª–æ–∂–∏)\b.*\b(–ø—Ä–∏–±—ã–ª—å|–¥–æ—Ö–æ–¥|–ø—Ä–æ—Ü–µ–Ω—Ç)\b',
            r'\b(–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç|–±–∏—Ç–∫–æ–∏–Ω|—ç—Ñ–∏—Ä)\b.*\b(–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª—å)\b',
            r'\b(–ø–∏—Ä–∞–º–∏–¥–∞|–º–ª–º|—Å–µ—Ç–µ–≤–æ–π)\b',
            
            # –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
            r'\b(–≤—ã–∏–≥—Ä—ã—à|–≤—ã–∏–≥—Ä–∞–ª|–ø—Ä–∏–∑)\b.*\b(–¥–µ–Ω—å–≥–∏|—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|\$)\b',
            r'\b(–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–¥–∞—Ä–æ–º|–ø–æ–¥–∞—Ä–æ–∫)\b.*\b(–¥–µ–Ω—å–≥–∏|—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|\$)\b',
            r'\b(—Å—Ä–æ—á–Ω–æ|–±—ã—Å—Ç—Ä–æ|—Å–µ–≥–æ–¥–Ω—è)\b.*\b(–¥–µ–Ω—å–≥–∏|—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|\$)\b',
            
            # –°–ø–∞–º-—Å—Å—ã–ª–∫–∏
            r'\b(–ø–µ—Ä–µ—Ö–æ–¥–∏|–ø–µ—Ä–µ–π–¥–∏|—Å—Å—ã–ª–∫–∞)\b.*\b(–∑–¥–µ—Å—å|—Ç—É—Ç|–Ω–∏–∂–µ)\b',
            r'\b(–∫–∞–Ω–∞–ª|–≥—Ä—É–ø–ø–∞|—á–∞—Ç)\b.*\b(–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è|–ø–æ–¥–ø–∏—à–∏—Å—å)\b',
            r'\b(—Ä–µ–∫–ª–∞–º–∞|—Ä–µ–∫–ª–∞–º–∏—Ä—É—é|–ø—Ä–æ–¥–≤–∏–≥–∞—é)\b',
        ]
    
    def _load_suspicious_patterns(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—â–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        return [
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            r'[üîûüíäüíâüí∞üí∏üíµüí¥üí∂üí∑üí≥üíéüíçüíãüíÑüëÑüëÖüëÉüëÇüëÅüëÄüë§üë•üë¶üëßüë®üë©üë¥üëµüë∂üë∑üëÆüë≥üë≤üë±üë∞üë∏ü§¥ü§µü§∞ü§±ü§≤ü§≥ü§¥ü§µü§∞ü§±ü§≤ü§≥]',
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            r'(.)\1{4,}',  # 5+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
            
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            r'\b(—Ç–µ—Å—Ç|test|demo|sample)\b',
            r'\b(–±–æ—Ç|bot|admin|–∞–¥–º–∏–Ω)\b',
            r'\b(–ø—Ä–æ–¥–∞–º|–ø—Ä–æ–¥–∞—é|–∫—É–ø–ª—é|–∫—É–ø–ª—é)\b.*\b(–≤—Å–µ|–≤—Å—ë|—á—Ç–æ|—á—Ç–æ-—Ç–æ)\b',
        ]
    
    def analyze_bio_content(self, bio_text: str) -> Dict[str, any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–æ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        
        Args:
            bio_text: –¢–µ–∫—Å—Ç –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        if not bio_text or not bio_text.strip():
            return {
                "is_suspicious": False,
                "risk_score": 0,
                "categories": [],
                "matched_patterns": [],
                "reason": "–ë–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            }
        
        bio_lower = bio_text.lower().strip()
        risk_score = 0
        categories = []
        matched_patterns = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏
        drug_matches = self._check_patterns(bio_lower, self.drug_patterns, "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏")
        if drug_matches:
            risk_score += 50
            categories.append("–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏")
            matched_patterns.extend(drug_matches)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—é
        prostitution_matches = self._check_patterns(bio_lower, self.prostitution_patterns, "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—è")
        if prostitution_matches:
            risk_score += 40
            categories.append("–ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—è")
            matched_patterns.extend(prostitution_matches)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º
        spam_matches = self._check_patterns(bio_lower, self.spam_patterns, "—Å–ø–∞–º")
        if spam_matches:
            risk_score += 30
            categories.append("—Å–ø–∞–º")
            matched_patterns.extend(spam_matches)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_matches = self._check_patterns(bio_lower, self.suspicious_patterns, "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
        if suspicious_matches:
            risk_score += 20
            categories.append("–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
            matched_patterns.extend(suspicious_matches)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if len(bio_text) > 200:
            risk_score += 10
            categories.append("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –±–∏–æ")
        
        if bio_text.count('\n') > 5:
            risk_score += 10
            categories.append("–º–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        risk_score = min(risk_score, 100)
        
        return {
            "is_suspicious": risk_score >= 30,
            "risk_score": risk_score,
            "categories": categories,
            "matched_patterns": matched_patterns,
            "reason": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {', '.join(categories)}" if categories else "–ë–∏–æ –≤ –ø–æ—Ä—è–¥–∫–µ"
        }
    
    def _check_patterns(self, text: str, patterns: List[str], category: str) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            patterns: –°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        """
        matches = []
        for pattern in patterns:
            try:
                if re.search(pattern, text, re.IGNORECASE):
                    matches.append(f"{category}: {pattern}")
            except re.error as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ {pattern}: {e}")
        
        return matches

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
bio_analyzer = BioContentAnalyzer()
