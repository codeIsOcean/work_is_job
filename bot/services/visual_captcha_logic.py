# services/visual_captcha_logic.py
import asyncio
import random
import logging
import re
from io import BytesIO
from typing import Dict, Optional, Any, Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.deep_linking import create_start_link
from PIL import Image, ImageDraw, ImageFont

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.services.redis_conn import redis
from bot.database.models import CaptchaSettings, User, ScammerTracker
from datetime import datetime, timedelta
import time
from bot.services.enhanced_profile_analyzer import enhanced_profile_analyzer

logger = logging.getLogger(__name__)


async def generate_visual_captcha() -> Tuple[str, BufferedInputFile]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–æ—Ç–æ–≤."""
    width, height = 1200, 500  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π
    img = Image.new("RGB", (width, height), color=(255, 255, 255))
    d = ImageDraw.Draw(img)

    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        font_paths = [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
            "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf", 
            "/System/Library/Fonts/Arial.ttf",  # macOS
            "C:\\Windows\\Fonts\\arial.ttf",  # Windows
            "arial.ttf",
            "Arial.ttf"
        ]
        
        fonts = []
        logger.info(f"üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ {len(font_paths)} –ø—É—Ç–µ–π")
        
        for i, path in enumerate(font_paths):
            logger.info(f"üîç [DEBUG] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(font_paths)}: {path}")
            try:
                fonts = [ImageFont.truetype(path, size) for size in (120, 130, 140, 150)]  # –ï—â–µ –∫—Ä—É–ø–Ω–µ–µ
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —à—Ä–∏—Ñ—Ç: {path}, —Å–æ–∑–¥–∞–Ω–æ {len(fonts)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                break
            except (IOError, OSError) as e:
                logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {path}: {e}")
                continue
        
        logger.info(f"üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: fonts={len(fonts) if fonts else 0}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
        if not fonts or len(fonts) == 0:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç")
            default_font = ImageFont.load_default()
            fonts = [default_font] * 4  # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ø–∏–∏
            logger.info(f"üîç [DEBUG] –°–æ–∑–¥–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}")
        
        
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞: {e}")
        fonts = [ImageFont.load_default()]

    # –£–ø—Ä–æ—â–∞–µ–º –∫–∞–ø—á—É - –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –∏ —á–∏—Ç–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    captcha_type = random.choices(
        ["simple_number", "simple_math", "simple_text"], 
        weights=[40, 40, 20]  # 40% –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞, 40% –ø—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, 20% –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    )[0]

    if captcha_type == "simple_number":
        # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 20
        answer = str(random.randint(1, 20))
        text_to_draw = answer
    elif captcha_type == "simple_math":
        # –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∏—Å–ª–∞–º–∏
        a = random.randint(1, 10)
        b = random.randint(1, 10)
        op = random.choice(["+", "-"])
        if op == "+":
            answer = str(a + b)
            text_to_draw = f"{a} + {b}"
        else:  # –≤—ã—á–∏—Ç–∞–Ω–∏–µ
            if a < b:
                a, b = b, a  # —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            answer = str(a - b)
            text_to_draw = f"{a} - {b}"
    else:  # simple_text - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–∑ 3-4 —Å–∏–º–≤–æ–ª–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö –±—É–∫–≤
        chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
        answer = "".join(random.choice(chars) for _ in range(3))  # —Ç–æ–ª—å–∫–æ 3 —Å–∏–º–≤–æ–ª–∞
        text_to_draw = answer

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    for y in range(height):
        for x in range(width):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –±–µ–ª–æ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä–æ–º—É
            intensity = int(255 - (y / height) * 20)
            img.putpixel((x, y), (intensity, intensity, intensity))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    for _ in range(8):
        y = random.randint(0, height - 1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: height-1 –≤–º–µ—Å—Ç–æ height
        d.line([(0, y), (width, y)],
               fill=(random.randint(200, 240), random.randint(200, 240), random.randint(200, 240)),
               width=random.randint(2, 5))

    # –°–ª–æ–∂–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
    for _ in range(25):
        x1, y1 = random.randint(0, width - 1), random.randint(0, height - 1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        x2, y2 = random.randint(0, width - 1), random.randint(0, height - 1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∏–Ω–∏–π
        color = (random.randint(120, 200), random.randint(120, 200), random.randint(120, 200))
        d.line([(x1, y1), (x2, y2)], fill=color, width=random.randint(1, 4))

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ—á–Ω–æ–≥–æ —à—É–º–∞
    for _ in range(1500):
        x = random.randint(0, width - 1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: width-1 –≤–º–µ—Å—Ç–æ width
        y = random.randint(0, height - 1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: height-1 –≤–º–µ—Å—Ç–æ height
        color = (random.randint(200, 255), random.randint(200, 255), random.randint(200, 255))
        img.putpixel((x, y), color)

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –ª–∏–Ω–∏–∏
    for _ in range(5):
        points = []
        for i in range(8):
            x = i * width // 7
            y = random.randint(height // 3, 2 * height // 3)
            points.append((x, y))
        color = (random.randint(170, 230), random.randint(170, 230), random.randint(170, 230))
        d.line(points, fill=color, width=random.randint(1, 3))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
    pixels = img.load()
    for y in range(height):
        for x in range(width):
            r, g, b = pixels[x, y]
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–¥–≤–∏–≥–∏
            if random.random() < 0.1:  # 10% –ø–∏–∫—Å–µ–ª–µ–π
                r = min(255, r + random.randint(-30, 30))
                g = min(255, g + random.randint(-30, 30))
                b = min(255, b + random.randint(-30, 30))
                pixels[x, y] = (max(0, r), max(0, g), max(0, b))

    # –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤
    spacing = width // (len(text_to_draw) + 2)
    x_offset = spacing
    
    logger.info(f"üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞: '{text_to_draw}', –¥–ª–∏–Ω–∞={len(text_to_draw)}")
    logger.info(f"üîç [DEBUG] –ú–∞—Å—Å–∏–≤ —à—Ä–∏—Ñ—Ç–æ–≤: –¥–ª–∏–Ω–∞={len(fonts)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={[str(f) for f in fonts[:2]]}")
    
    for i, ch in enumerate(text_to_draw):
        logger.info(f"üîç [DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª {i+1}/{len(text_to_draw)}: '{ch}'")
        
        # –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–æ ¬±30 –≥—Ä–∞–¥—É—Å–æ–≤ (—É–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        angle = random.randint(-30, 30)
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        if not fonts or len(fonts) == 0:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –º–∞—Å—Å–∏–≤ —à—Ä–∏—Ñ—Ç–æ–≤ –ø—É—Å—Ç!")
            default_font = ImageFont.load_default()
            fonts = [default_font] * 4
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ —Ü–∏–∫–ª–µ
        try:
            logger.info(f"üîç [DEBUG] –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω–æ–π {len(fonts)}")
            if fonts and len(fonts) > 0:
                font = random.choice(fonts)
                logger.info(f"üîç [DEBUG] –í—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç: {font}")
            else:
                font = ImageFont.load_default()
                logger.info(f"üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç")
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à—Ä–∏—Ñ—Ç–∞: {e}")
            font = ImageFont.load_default()

        char_img = Image.new("RGBA", (250, 300), (255, 255, 255, 0))
        char_draw = ImageDraw.Draw(char_img)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        if i % 2 == 0:
            color = (random.randint(10, 60), random.randint(10, 60), random.randint(10, 60))
        else:
            color = (random.randint(40, 90), random.randint(40, 90), random.randint(40, 90))

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º
        char_draw.text((25, 25), ch, font=font, fill=color)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if font == ImageFont.load_default():
            char_img = char_img.resize((750, 900), Image.Resampling.LANCZOS)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        rotated = char_img.rotate(angle, expand=1, fillcolor=(255, 255, 255, 0))
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        y_pos = random.randint(height // 4, height // 2)
        img.paste(rotated, (x_offset, y_pos), rotated)
        x_offset += spacing + random.randint(-20, 20)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–∞—é—â–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–≤–µ—Ä—Ö —Ç–µ–∫—Å—Ç–∞
    for _ in range(8):
        start_y = random.randint(height // 5, 4 * height // 5)
        end_y = random.randint(height // 5, 4 * height // 5)
        # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π
        color = (random.randint(150, 220), random.randint(150, 220), random.randint(150, 220))
        d.line([(0, start_y), (width, end_y)], fill=color, width=random.randint(2, 4))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ª–∏–Ω–∏–∏
    for _ in range(5):
        points = []
        for i in range(8):
            x = i * width // 7
            y = random.randint(height // 3, 2 * height // 3)
            points.append((x, y))
        color = (random.randint(170, 230), random.randint(170, 230), random.randint(170, 230))
        d.line(points, fill=color, width=random.randint(1, 3))

    # –í –±–∞–π—Ç—ã
    img_byte_arr = BytesIO()
    img.save(img_byte_arr, format="PNG")
    img_byte_arr.seek(0)
    file = BufferedInputFile(img_byte_arr.getvalue(), filename="captcha.png")
    
    logger.info(f"‚úÖ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: —Ç–∏–ø={captcha_type}, –æ—Ç–≤–µ—Ç={answer}, —à—Ä–∏—Ñ—Ç–æ–≤={len(fonts)}")
    return answer, file


async def create_group_invite_link(bot: Bot, group_name: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç start deep-link –¥–ª—è –∫–∞–ø—á–∏ (–Ω–∞ —Å–∞–º—É –≥—Ä—É–ø–ø—É —ç—Ç–æ –ù–ï —Å—Å—ã–ª–∫–∞)."""
    return await create_start_link(bot, f"deep_link_{group_name}")


async def delete_message_after_delay(bot: Bot, chat_id: int, message_id: int, delay: float):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥."""
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        if "message to delete not found" in str(e).lower():
            return
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


async def send_captcha_reminder(bot: Bot, chat_id: int, user_id: int, group_name: str) -> Optional[int]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        group_display_name = group_name.replace("_", " ").title()
        group_link = None
        
        if group_name.startswith("private_"):
            try:
                chat_id_for_name = int(group_name.replace("private_", ""))
                chat = await bot.get_chat(chat_id_for_name)
                group_display_name = chat.title
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id_for_name,
                    name=f"Reminder for user {user_id}",
                    creates_join_request=False,
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ
                group_link = str(invite.invite_link) if invite.invite_link else None
            except Exception:
                pass
        elif group_name.startswith("-") and group_name[1:].isdigit():
            try:
                chat_id_for_name = int(group_name)
                chat = await bot.get_chat(chat_id_for_name)
                group_display_name = chat.title
                if chat.username:
                    group_link = f"https://t.me/{chat.username}"
                else:
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
                    invite = await bot.create_chat_invite_link(
                        chat_id=chat_id_for_name,
                        name=f"Reminder for user {user_id}",
                        creates_join_request=False,
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ  
                    group_link = str(invite.invite_link) if invite.invite_link else None
            except Exception:
                pass
        else:
            # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ username
            group_link = f"https://t.me/{group_name}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≥—Ä—É–ø–ø—É
        if group_link:
            reminder_text = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø—á–µ</b>\n\n"
                f"–í—ã –Ω–µ —Ä–µ—à–∏–ª–∏ –∫–∞–ø—á—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <a href='{group_link}'>{group_display_name}</a>.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 2 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        else:
            reminder_text = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø—á–µ</b>\n\n"
                f"–í—ã –Ω–µ —Ä–µ—à–∏–ª–∏ –∫–∞–ø—á—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É <b>{group_display_name}</b>.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 2 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        
        reminder_msg = await bot.send_message(
            chat_id=user_id,
            text=reminder_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Redis –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        reminder_key = f"captcha_reminder_msgs:{user_id}"
        existing_reminders = await redis.get(reminder_key)
        if existing_reminders:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            reminders_str = existing_reminders.decode('utf-8') if isinstance(existing_reminders, bytes) else str(existing_reminders)
            reminder_list = reminders_str.split(",")
            reminder_list.append(str(reminder_msg.message_id))
            await redis.setex(reminder_key, 600, ",".join(reminder_list))  # –•—Ä–∞–Ω–∏–º 10 –º–∏–Ω—É—Ç
        else:
            await redis.setex(reminder_key, 600, str(reminder_msg.message_id))
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã (150 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã)
        asyncio.create_task(delete_message_after_delay(bot, user_id, reminder_msg.message_id, 150))
        
        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        return reminder_msg.message_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–ø—á–µ: {e}")
        return None


async def schedule_captcha_reminder(bot: Bot, user_id: int, group_name: str, delay_minutes: int = 2, reminder_count: int = 0):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–ø—á–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç. –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–∞."""
    await asyncio.sleep(delay_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—á—É
    captcha_data = await get_captcha_data(user_id)
    if captcha_data and captcha_data["group_name"] == group_name:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_msg_id = await send_captcha_reminder(bot, user_id, user_id, group_name)
        
        # –ï—Å–ª–∏ –µ—â–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–º–µ–Ω—å—à–µ 2 –ø–æ–≤—Ç–æ—Ä–æ–≤)
        if reminder_count < 1:  # 0 = –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, 1 = –≤—Ç–æ—Ä–æ–µ (–∏—Ç–æ–≥–æ 2)
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            asyncio.create_task(schedule_captcha_reminder(bot, user_id, group_name, 2, reminder_count + 1))
        
        return reminder_msg_id
    return None


async def save_join_request(user_id: int, chat_id: int, group_id: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ join-request –Ω–∞ 1 —á–∞—Å."""
    await redis.setex(f"join_request:{user_id}:{group_id}", 3600, str(chat_id))


async def create_deeplink_for_captcha(bot: Bot, group_id: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç /start deep-link –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏."""
    deep_link = await create_start_link(bot, f"deep_link_{group_id}")
    logger.info(f"–°–æ–∑–¥–∞–Ω deep link: {deep_link} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
    return deep_link


async def get_captcha_keyboard(deep_link: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É¬ª (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç /start —Å deep link)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deep_link –≤–∞–ª–∏–¥–Ω—ã–π
    if not deep_link or not deep_link.startswith(('http://', 'https://', 'tg://')):
        # –ï—Å–ª–∏ deep_link –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üß© –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data="captcha_fallback")]]
        )
    
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üß© –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", url=deep_link)]]
    )


async def get_group_settings_keyboard(group_id: str, captcha_enabled: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –≤ –≥—Ä—É–ø–ø–µ."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if captcha_enabled == "1" else "–í–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"set_visual_captcha:{group_id}:1",
                ),
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–∫–ª—é—á–µ–Ω–æ" if captcha_enabled == "0" else "–í—ã–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"set_visual_captcha:{group_id}:0",
                ),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="redirect:captcha_settings")],
        ]
    )


async def get_group_join_keyboard(group_link: Optional[str], group_display_name: Optional[str] = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ https://t.me/ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ 400.
    """
    import re
    
    title = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ ¬´{group_display_name}¬ª" if group_display_name else "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø—ã: group_link='{group_link}' (—Ç–∏–ø: {type(group_link)}), title='{title}'")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º group_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å bytes –∏–∑ Redis –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
    group_link_str = None
    if group_link is not None:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(group_link, bytes):
                group_link_str = group_link.decode('utf-8', errors='ignore').strip()
            elif isinstance(group_link, str):
                group_link_str = group_link.strip()
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏
                try:
                    group_link_str = str(group_link).strip()
                except Exception:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å group_link –≤ —Å—Ç—Ä–æ–∫—É: {type(group_link)}")
                    group_link_str = None
            
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
            if group_link_str and len(group_link_str) > 0 and isinstance(group_link_str, str):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                group_link_str = ''.join(char for char in group_link_str if char.isprintable())
                group_link_str = group_link_str.strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã URL (Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - 2048 —Å–∏–º–≤–æ–ª–æ–≤)
                if len(group_link_str) > 2048:
                    logger.error(f"‚ùå URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(group_link_str)} —Å–∏–º–≤–æ–ª–æ–≤), –º–∞–∫—Å–∏–º—É–º 2048")
                    group_link_str = None
                
                if group_link_str:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è Telegram —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ regex
                    telegram_link_pattern = r'^(https?://)?(t\.me/|telegram\.me/)'
                    is_valid_telegram_link = bool(re.match(telegram_link_pattern, group_link_str, re.IGNORECASE))
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è tg:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                    if not is_valid_telegram_link:
                        is_valid_telegram_link = group_link_str.startswith("tg://")
                    
                    if is_valid_telegram_link:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è https://
                        if group_link_str.startswith("http://"):
                            final_url = group_link_str.replace("http://", "https://", 1)
                        elif group_link_str.startswith("t.me/") or group_link_str.startswith("telegram.me/"):
                            final_url = f"https://{group_link_str}"
                        elif group_link_str.startswith("tg://"):
                            # –î–ª—è tg:// –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                            final_url = group_link_str
                        else:
                            final_url = group_link_str
                        
                        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
                        if isinstance(final_url, str) and len(final_url) > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            try:
                                # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç URL
                                final_url = final_url.strip()
                                
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
                                if not isinstance(final_url, str):
                                    raise ValueError(f"final_url –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {type(final_url)}")
                                
                                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: {final_url[:100]}... (—Ç–∏–ø: {type(final_url)}, –¥–ª–∏–Ω–∞: {len(final_url)})")
                                
                                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
                                try:
                                    button = InlineKeyboardButton(text=title, url=final_url)
                                    
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
                                    if hasattr(button, 'url') and button.url:
                                        if not isinstance(button.url, str):
                                            raise ValueError(f"button.url –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {type(button.url)}")
                                        
                                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å URL: '{final_url[:50]}...' (—Ç–∏–ø URL –≤ –∫–Ω–æ–ø–∫–µ: {type(button.url)})")
                                        return InlineKeyboardMarkup(
                                            inline_keyboard=[[button]]
                                        )
                                    else:
                                        raise ValueError("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                                except Exception as btn_error:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ InlineKeyboardButton: {btn_error}, url='{final_url[:100]}', type={type(final_url)}")
                                    import traceback
                                    logger.error(traceback.format_exc())
                                    
                            except Exception as validation_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL: {validation_error}, url='{group_link_str[:100]}'")
                        else:
                            logger.error(f"‚ùå final_url –Ω–µ –≤–∞–ª–∏–¥–Ω–∞: type={type(final_url)}, len={len(final_url) if final_url else 0}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π Telegram —Å—Å—ã–ª–∫–æ–π: '{group_link_str[:100]}'")
                else:
                    logger.warning(f"‚ö†Ô∏è group_link_str –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
            else:
                logger.warning(f"‚ö†Ô∏è group_link_str –Ω–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è: '{group_link_str}' (—Ç–∏–ø: {type(group_link_str)})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ group_link: {e}, group_link='{group_link}', type={type(group_link)}")
            import traceback
            logger.error(traceback.format_exc())
    else:
        logger.warning(f"‚ö†Ô∏è group_link –ø—É—Å—Ç–æ–π –∏–ª–∏ None (—Ç–∏–ø: {type(group_link)})")
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data –≤–º–µ—Å—Ç–æ url
    logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–Ω–æ–ø–∫—É —Å callback_data –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å URL")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=title, callback_data="group_link_fallback")]
        ]
    )


async def save_captcha_data(user_id: int, captcha_answer: str, group_name: str, attempts: int = 0) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏ (–Ω–∞ 5 –º–∏–Ω—É—Ç)."""
    await redis.setex(f"captcha:{user_id}", 300, f"{captcha_answer}:{group_name}:{attempts}")


async def get_captcha_data(user_id: int) -> Optional[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏ –∏–∑ Redis."""
    raw = await redis.get(f"captcha:{user_id}")
    if not raw:
        return None
    parts = raw.split(":")
    if len(parts) < 3:
        return None
    return {"captcha_answer": parts[0], "group_name": parts[1], "attempts": int(parts[2])}


async def set_rate_limit(user_id: int, seconds: int = 180) -> None:
    """–°—Ç–∞–≤–∏—Ç —Ä–µ–π—Ç–ª–∏–º–∏—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã –∫–∞–ø—á–∏."""
    await redis.setex(f"rate_limit:{user_id}", seconds, str(seconds))


async def check_rate_limit(user_id: int) -> bool:
    """True, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–ª–∏–º–∏—Ç."""
    return bool(await redis.exists(f"rate_limit:{user_id}"))


async def get_rate_limit_time_left(user_id: int) -> int:
    """–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å —É —Ä–µ–π—Ç–ª–∏–º–∏—Ç–∞ (0, –µ—Å–ª–∏ –Ω–µ—Ç)."""
    ttl = await redis.ttl(f"rate_limit:{user_id}")
    return max(0, ttl)


async def check_admin_rights(bot: Bot, chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ."""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


async def set_visual_captcha_status(chat_id: int, enabled: bool) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É (—Ñ–ª–∞–≥ –≤ Redis)."""
    await redis.set(f"visual_captcha_enabled:{chat_id}", "1" if enabled else "0")


async def get_visual_captcha_status(chat_id: int) -> bool:
    """–°—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –∏–∑ Redis."""
    return (await redis.get(f"visual_captcha_enabled:{chat_id}")) == "1"


async def approve_chat_join_request(bot: Bot, chat_id: int, user_id: int) -> Dict[str, Any]:
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
      "success": bool,
      "message": str,
      "group_link": Optional[str]  # —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ apply
    }
    –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç —Å creates_join_request=False.
    –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å username ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º https://t.me/<username>.
    """
    result: Dict[str, Any] = {"success": False, "message": "", "group_link": None}

    try:
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: chat_id={chat_id}, user_id={user_id}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        await asyncio.sleep(5.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat = await bot.get_chat(chat_id)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: title={chat.title}, username={chat.username}, type={chat.type}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
                result["success"] = True
                result["message"] = (
                    "üéâ <b>–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    "‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–¥–æ–±—Ä–µ–Ω</b>\n"
                    "üîó <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</b>"
                )
                logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
            except Exception as e:
                error_msg = str(e)
                if "429" in error_msg and attempt < max_retries - 1:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º retry_after –∏–∑ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    if "retry_after" in error_msg:
                        import re
                        match = re.search(r'"retry_after":(\d+)', error_msg)
                        if match:
                            retry_after = int(match.group(1)) + 5  # –î–æ–±–∞–≤–ª—è–µ–º 5 —Å–µ–∫—É–Ω–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                        else:
                            retry_after = 20 + attempt * 10  # 20—Å, 30—Å, 40—Å
                    else:
                        retry_after = 20 + attempt * 10  # 20—Å, 30—Å, 40—Å
                    
                    logger.warning(f"Rate limit –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {retry_after}—Å")
                    await asyncio.sleep(retry_after)
                    continue
                elif "HIDE_REQUESTER_MISSING" in error_msg:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
                    try:
                        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                        if member.status in ["member", "administrator", "creator"]:
                            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
                            result["success"] = True
                            result["message"] = "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã!"
                            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
                            if chat.username:
                                result["group_link"] = f"https://t.me/{chat.username}"
                            break
                    except Exception as member_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {member_error}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
                    result["success"] = True
                    result["message"] = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
                    if chat.username:
                        result["group_link"] = f"https://t.me/{chat.username}"
                    break
                else:
                    raise e

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        if result["success"]:
            if chat.username:
                # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –ø–æ username
                result["group_link"] = f"https://t.me/{chat.username}"
                logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É: {result['group_link']}")
            else:
                # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è ‚Äî –¥–µ–ª–∞–µ–º –∏–Ω–≤–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –ù–ï —Å–æ–∑–¥–∞—ë—Ç join request –ø–æ–≤—Ç–æ—Ä–Ω–æ
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–≤–∞–π—Ç–∞
                await asyncio.sleep(5.0)
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    name=f"Invite for user {user_id}",
                    creates_join_request=False,
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ
                result["group_link"] = str(invite.invite_link) if invite.invite_link else None
                logger.info(f"–°—Å—ã–ª–∫–∞-–∏–Ω–≤–∞–π—Ç –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã: {result['group_link']} (—Ç–∏–ø: {type(result['group_link'])})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ approve_chat_join_request: {e}")
        result["message"] = f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É: {e}"

        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
        try:
            await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            chat = await bot.get_chat(chat_id)
            if chat.username:
                result["group_link"] = f"https://t.me/{chat.username}"
            else:
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    name=f"Invite for user {user_id}",
                    creates_join_request=False,
                )
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ
                result["group_link"] = str(invite.invite_link) if invite.invite_link else None
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e2}")

    return result


async def get_group_display_name(group_name: str) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã (–∏–∑ Redis –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∏–º–µ–Ω–∏)."""
    cached = await redis.get(f"group_display_name:{group_name}")
    if cached:
        return str(cached)
    return group_name.replace("_", " ").title()


async def save_user_to_db(session: AsyncSession, user_data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)."""
    try:
        result = await session.execute(select(User).where(User.user_id == user_data["user_id"]))
        existing = result.scalar_one_or_none()

        if not existing:
            new_user = User(
                user_id=user_data["user_id"],
                username=user_data.get("username"),
                first_name=user_data.get("first_name"),
                last_name=user_data.get("last_name"),
                language_code=user_data.get("language_code", "ru"),
                is_bot=user_data.get("is_bot", False),
                is_premium=user_data.get("is_premium", False),
                added_to_attachment_menu=user_data.get("added_to_attachment_menu", False),
                can_join_groups=user_data.get("can_join_groups", True),
                can_read_all_group_messages=user_data.get("can_read_all_group_messages", False),
                supports_inline_queries=user_data.get("supports_inline_queries", False),
                can_connect_to_business=user_data.get("can_connect_to_business", False),
                has_main_web_app=user_data.get("has_main_web_app", False),
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
            )
            session.add(new_user)
            await session.commit()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
        else:
            existing.username = user_data.get("username")
            existing.first_name = user_data.get("first_name")
            existing.last_name = user_data.get("last_name")
            existing.updated_at = datetime.utcnow()
            await session.commit()
            logger.info(f"‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await session.rollback()


async def get_group_link_from_redis_or_create(bot: Bot, group_name: str) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É:
    - –∏–∑ –∫—ç—à–∞ Redis,
    - –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∏–Ω–≤–∞–π—Ç —Å creates_join_request=False,
    - –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö ‚Äî https://t.me/<username>.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å.
    """
    try:
        cached = await redis.get(f"group_link:{group_name}")
        if cached:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cached_str = cached.decode('utf-8') if isinstance(cached, bytes) else str(cached)
            logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {group_name}: {cached_str} (—Ç–∏–ø: {type(cached_str)})")
            return cached_str

        logger.info(f"üîó –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")
        group_link: Optional[str] = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≥—Ä—É–ø–ø
        chat_id = None
        if group_name.startswith("private_"):
            chat_id = int(group_name.replace("private_", ""))
        elif group_name.startswith("-") and group_name[1:].isdigit():
            chat_id = int(group_name)
        else:
            # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ username
            group_link = f"https://t.me/{group_name}"
            await redis.setex(f"group_link:{group_name}", 3600, group_link)
            return group_link

        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —á–∏—Å–ª–æ–≤—ã—Ö ID
        if chat_id:
            try:
                chat = await bot.get_chat(chat_id)
                if chat.username:
                    group_link = f"https://t.me/{chat.username}"
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–≤–∞–π—Ç–∞
                    await asyncio.sleep(5.0)
                    invite = await bot.create_chat_invite_link(
                        chat_id=chat_id,
                        name=f"Invite for {group_name}",
                        creates_join_request=False,
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ  
                    group_link = str(invite.invite_link) if invite.invite_link else None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –µ—â—ë —Ä–∞–∑ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç
                try:
                    await asyncio.sleep(10.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 10 —Å–µ–∫—É–Ω–¥
                    invite = await bot.create_chat_invite_link(
                        chat_id=chat_id,
                        name=f"Invite for {group_name}",
                        creates_join_request=False,
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º invite.invite_link –≤ —Å—Ç—Ä–æ–∫—É —è–≤–Ω–æ  
                    group_link = str(invite.invite_link) if invite.invite_link else None
                except Exception as e2:
                    logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞: {e2}")
                    group_link = None

        if group_link:
            await redis.setex(f"group_link:{group_name}", 3600, group_link)
            logger.info(f"üîó –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è {group_name}: {group_link}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")

        return group_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É {group_name}: {e}")
        return None


async def is_visual_captcha_enabled(session: AsyncSession, chat_id: int) -> bool:
    """–°—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –∏–∑ –ë–î (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–∞–±–ª–∏—Ü—É CaptchaSettings)."""
    try:
        result = await session.execute(select(CaptchaSettings).where(CaptchaSettings.group_id == chat_id))
        settings = result.scalar_one_or_none()
        is_enabled = settings.is_visual_enabled if settings else False
        logger.info(
            f"visual_captcha_logic: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: "
            f"{'–≤–∫–ª—é—á–µ–Ω–∞' if is_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}"
        )
        return is_enabled
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {e}")
        return False


# ==================== –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò ====================

async def start_behavior_tracking(user_id: int) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏."""
    current_time = time.time()
    await redis.setex(f"captcha_start_time:{user_id}", 600, str(current_time))  # 10 –º–∏–Ω—É—Ç
    await redis.setex(f"captcha_attempts:{user_id}", 600, "0")  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    await redis.setex(f"captcha_inputs:{user_id}", 600, "")  # –ò—Å—Ç–æ—Ä–∏—è –≤–≤–æ–¥–∞


async def track_captcha_input(user_id: int, input_text: str) -> None:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è."""
    current_time = time.time()
    input_data = f"{current_time}:{input_text}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
    history = await redis.get(f"captcha_inputs:{user_id}")
    if history:
        history = history + "|" + input_data
    else:
        history = input_data
    
    await redis.setex(f"captcha_inputs:{user_id}", 600, history)


async def analyze_behavior_patterns(user_id: int) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    analysis = {
        "is_suspicious": False,
        "reasons": [],
        "risk_score": 0
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
        start_time_str = await redis.get(f"captcha_start_time:{user_id}")
        if start_time_str:
            start_time = float(start_time_str)
            solve_time = time.time() - start_time
            
            # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥) - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if solve_time < 3:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏")
                analysis["risk_score"] += 30
            
            # –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç) - —Ç–æ–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            elif solve_time > 300:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏")
                analysis["risk_score"] += 20
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–≤–æ–¥–∞
        input_history = await redis.get(f"captcha_inputs:{user_id}")
        if input_history:
            inputs = input_history.split("|")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥
            if len(inputs) > 1:
                for i in range(1, len(inputs)):
                    prev_time = float(inputs[i-1].split(":")[0])
                    curr_time = float(inputs[i].split(":")[0])
                    time_diff = curr_time - prev_time
                    
                    # –í–≤–æ–¥ –±—ã—Å—Ç—Ä–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                    if time_diff < 0.5:
                        analysis["is_suspicious"] = True
                        analysis["reasons"].append("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥")
                        analysis["risk_score"] += 25
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            unique_inputs = set()
            for inp in inputs:
                text = inp.split(":", 1)[1] if ":" in inp else inp
                unique_inputs.add(text.lower().strip())
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if len(unique_inputs) == 1 and len(inputs) > 2:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
                analysis["risk_score"] += 20
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempts_str = await redis.get(f"captcha_attempts:{user_id}")
        if attempts_str:
            attempts = int(attempts_str)
            if attempts > 5:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫")
                analysis["risk_score"] += 15
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if analysis["risk_score"] >= 50:
            analysis["is_suspicious"] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
    
    return analysis


async def increment_captcha_attempts(user_id: int) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏."""
    attempts_str = await redis.get(f"captcha_attempts:{user_id}")
    attempts = int(attempts_str) + 1 if attempts_str else 1
    await redis.setex(f"captcha_attempts:{user_id}", 600, str(attempts))
    return attempts


# ==================== –ü–†–û–í–ï–†–ö–ê –ü–†–û–§–ò–õ–Ø ====================

async def analyze_user_messages(user_id: int, bot: Bot, chat_id: int) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."""
    analysis = {
        "is_suspicious": False,
        "reasons": [],
        "risk_score": 0
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        messages = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ get_updates (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
            # –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ get_chat_history –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.info(f"   ‚ÑπÔ∏è –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–ô –ü–†–û–ü–£–©–ï–ù (API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è) (0 –±–∞–ª–ª–æ–≤)")
            return analysis
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return analysis
        
        if not messages:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info(f"   ‚ÑπÔ∏è –ù–ï–¢ –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (0 –±–∞–ª–ª–æ–≤)")
            return analysis
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        message_counts = {}
        for msg in messages:
            msg_lower = msg.lower().strip()
            if len(msg_lower) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_counts[msg_lower] = message_counts.get(msg_lower, 0) + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        total_messages = len(messages)
        unique_messages = len(message_counts)
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if unique_messages < total_messages * 0.3:  # –ú–µ–Ω–µ–µ 30% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π")
            analysis["risk_score"] += 30
            logger.warning(f"   ‚ö†Ô∏è –ú–ù–û–ì–û –ü–û–í–¢–û–†–ï–ù–ò–ô: {unique_messages}/{total_messages} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (+30 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        for msg, count in message_counts.items():
            if count >= 5:  # –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è 5+ —Ä–∞–∑
                analysis["is_suspicious"] = True
                analysis["reasons"].append(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è {count} —Ä–∞–∑")
                analysis["risk_score"] += 20
                logger.warning(f"   ‚ö†Ô∏è –ü–û–í–¢–û–†–ï–ù–ò–ï: '{msg[:30]}...' {count} —Ä–∞–∑ (+20 –±–∞–ª–ª–æ–≤)")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = [
            "—Ä–µ–∫–ª–∞–º–∞", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–µ–Ω—å–≥–∏", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω",
            "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ø–∏—Ä–∞–º–∏–¥–∞", "–º–ª–º", "—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É",
            "telegram.me", "t.me", "—Å—Å—ã–ª–∫–∞", "–ø–µ—Ä–µ—Ö–æ–¥–∏", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è"
        ]
        
        spam_count = 0
        for msg in messages:
            msg_lower = msg.lower()
            for pattern in suspicious_patterns:
                if pattern in msg_lower:
                    spam_count += 1
                    break
        
        if spam_count > 0:
            analysis["is_suspicious"] = True
            analysis["reasons"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {spam_count}")
            analysis["risk_score"] += spam_count * 10
            logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: {spam_count} (+{spam_count * 10} –±–∞–ª–ª–æ–≤)")
        
        if not analysis["is_suspicious"]:
            logger.info(f"   ‚úÖ –°–û–û–ë–©–ï–ù–ò–Ø –ù–û–†–ú–ê–õ–¨–ù–´–ï: {unique_messages}/{total_messages} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (0 –±–∞–ª–ª–æ–≤)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    return analysis


async def analyze_user_profile(user_data: dict, bot: Bot = None) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–∏–æ
    """
    try:
        user_id = user_data.get('id') or user_data.get('user_id', 'unknown')
        logger.info(f"üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}:")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        enhanced_analysis = await enhanced_profile_analyzer.analyze_user_profile_enhanced(user_data, bot)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å–æ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        return {
            "is_suspicious": enhanced_analysis["is_suspicious"],
            "reasons": enhanced_analysis["reasons"],
            "risk_score": enhanced_analysis["risk_score"]
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–Ω–∞–ª–∏–∑—É
        return await analyze_user_profile_old(user_data, bot)


async def analyze_user_profile_old(user_data: dict, bot: Bot = None) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    analysis = {
        "is_suspicious": False,
        "reasons": [],
        "risk_score": 0
    }
    
    user_id = user_data.get("user_id", "unknown")
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    print(f"   üìù –ò–º—è: {user_data.get('first_name', '–ù–ï–¢')}")
    print(f"   üë§ Username: @{user_data.get('username', '–ù–ï–¢')}")
    print(f"   üåç –Ø–∑—ã–∫: {user_data.get('language_code', '–ù–ï–¢')}")
    print(f"   ü§ñ –ë–æ—Ç: {user_data.get('is_bot', False)}")
    print(f"   ‚≠ê Premium: {user_data.get('is_premium', False)}")
    
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    logger.info(f"   üìù –ò–º—è: {user_data.get('first_name', '–ù–ï–¢')}")
    logger.info(f"   üë§ Username: @{user_data.get('username', '–ù–ï–¢')}")
    logger.info(f"   üåç –Ø–∑—ã–∫: {user_data.get('language_code', '–ù–ï–¢')}")
    logger.info(f"   ü§ñ –ë–æ—Ç: {user_data.get('is_bot', False)}")
    logger.info(f"   ‚≠ê Premium: {user_data.get('is_premium', False)}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        if "created_at" in user_data:
            created_at = user_data["created_at"]
            if isinstance(created_at, str):
                created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            
            account_age = datetime.utcnow() - created_at.replace(tzinfo=None)
            
            # –ê–∫–∫–∞—É–Ω—Ç –º–ª–∞–¥—à–µ 1 –¥–Ω—è - –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if account_age.days < 1:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–û—á–µ–Ω—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω–µ–µ 1 –¥–Ω—è)")
                analysis["risk_score"] += 40
                logger.warning(f"   ‚ö†Ô∏è –û–ß–ï–ù–¨ –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+40 –±–∞–ª–ª–æ–≤)")
            
            # –ê–∫–∫–∞—É–Ω—Ç –º–ª–∞–¥—à–µ 7 –¥–Ω–µ–π - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            elif account_age.days < 7:
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π)")
                analysis["risk_score"] += 25
                logger.warning(f"   ‚ö†Ô∏è –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+25 –±–∞–ª–ª–æ–≤)")
            
            # –ê–∫–∫–∞—É–Ω—Ç –º–ª–∞–¥—à–µ 30 –¥–Ω–µ–π - —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            elif account_age.days < 30:
                analysis["risk_score"] += 10
                logger.info(f"   ‚ÑπÔ∏è –ú–û–õ–û–î–û–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+10 –±–∞–ª–ª–æ–≤)")
            else:
                logger.info(f"   ‚úÖ –°–¢–ê–†–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (0 –±–∞–ª–ª–æ–≤)")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        if bot and user_id != "unknown":
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                user_info = await bot.get_chat(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ get_chat
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_chat = await bot.get_chat(user_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
                    account_creation = None
                    if hasattr(user_chat, 'created_at') and user_chat.created_at:
                        account_creation = user_chat.created_at
                    elif hasattr(user_chat, 'date') and user_chat.date:
                        account_creation = user_chat.date
                    
                    if account_creation:
                        if isinstance(account_creation, str):
                            account_creation = datetime.fromisoformat(account_creation.replace('Z', '+00:00'))
                        
                        account_age = datetime.utcnow() - account_creation.replace(tzinfo=None)
                        
                        logger.info(f"   üìÖ –î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê: {account_creation.strftime('%Y-%m-%d %H:%M:%S')}")
                        logger.info(f"   ‚è∞ –í–û–ó–†–ê–°–¢ –ê–ö–ö–ê–£–ù–¢–ê: {account_age.days} –¥–Ω–µ–π")
                        
                        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                        if account_age.days < 1:
                            analysis["is_suspicious"] = True
                            analysis["reasons"].append("–û—á–µ–Ω—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω–µ–µ 1 –¥–Ω—è)")
                            analysis["risk_score"] += 50
                            logger.warning(f"   üö® –û–ß–ï–ù–¨ –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+50 –±–∞–ª–ª–æ–≤)")
                        elif account_age.days < 3:
                            analysis["is_suspicious"] = True
                            analysis["reasons"].append("–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω–µ–µ 3 –¥–Ω–µ–π)")
                            analysis["risk_score"] += 35
                            logger.warning(f"   ‚ö†Ô∏è –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+35 –±–∞–ª–ª–æ–≤)")
                        elif account_age.days < 7:
                            analysis["is_suspicious"] = True
                            analysis["reasons"].append("–ú–æ–ª–æ–¥–æ–π –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π)")
                            analysis["risk_score"] += 20
                            logger.warning(f"   ‚ö†Ô∏è –ú–û–õ–û–î–û–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+20 –±–∞–ª–ª–æ–≤)")
                        elif account_age.days < 30:
                            analysis["risk_score"] += 8
                            logger.info(f"   ‚ÑπÔ∏è –ú–û–õ–û–î–û–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (+8 –±–∞–ª–ª–æ–≤)")
                        else:
                            logger.info(f"   ‚úÖ –°–¢–ê–†–´–ô –ê–ö–ö–ê–£–ù–¢: {account_age.days} –¥–Ω–µ–π (0 –±–∞–ª–ª–æ–≤)")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å
                        analysis["risk_score"] += 5
                        logger.info(f"   ‚ÑπÔ∏è –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê (+5 –±–∞–ª–ª–æ–≤)")
                        
                except Exception as date_error:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {date_error}")
                    analysis["risk_score"] += 5
                    logger.info(f"   ‚ÑπÔ∏è –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê (+5 –±–∞–ª–ª–æ–≤)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                    photos = await bot.get_user_profile_photos(user_id, limit=1)
                    logger.info(f"   üì∏ –ü–†–û–í–ï–†–ö–ê –§–û–¢–û –ü–†–û–§–ò–õ–Ø: –Ω–∞–π–¥–µ–Ω–æ {photos.total_count} —Ñ–æ—Ç–æ")
                    
                    if photos.total_count == 0:
                        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                        logger.info(f"   ‚ÑπÔ∏è –ù–ï–¢ –§–û–¢–û –ü–†–û–§–ò–õ–Ø (0 –±–∞–ª–ª–æ–≤)")
                    else:
                        # –ï—Å—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç
                        photo = photos.photos[0][0]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ñ–æ—Ç–æ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        photo_date = None
                        if hasattr(photo, 'date') and photo.date:
                            photo_date = photo.date
                        elif hasattr(photo, 'created_at') and photo.created_at:
                            photo_date = photo.created_at
                        
                        if photo_date:
                            if isinstance(photo_date, str):
                                photo_date = datetime.fromisoformat(photo_date.replace('Z', '+00:00'))
                            
                            photo_age = datetime.utcnow() - photo_date.replace(tzinfo=None)
                            
                            logger.info(f"   üìÖ –î–ê–¢–ê –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û: {photo_date.strftime('%Y-%m-%d %H:%M:%S')}")
                            logger.info(f"   ‚è∞ –í–û–ó–†–ê–°–¢ –§–û–¢–û: {photo_age.days} –¥–Ω–µ–π")
                            
                            # –°–≤–µ–∂–µ–µ —Ñ–æ—Ç–æ (–º–µ–Ω–µ–µ 1 –¥–Ω—è) - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                            if photo_age.days < 1:
                                analysis["is_suspicious"] = True
                                analysis["reasons"].append("–°–≤–µ–∂–µ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–º–µ–Ω–µ–µ 1 –¥–Ω—è)")
                                analysis["risk_score"] += 25
                                logger.warning(f"   ‚ö†Ô∏è –°–í–ï–ñ–ï–ï –§–û–¢–û: {photo_age.days} –¥–Ω–µ–π (+25 –±–∞–ª–ª–æ–≤)")
                            elif photo_age.days < 7:
                                analysis["risk_score"] += 10
                                logger.info(f"   ‚ÑπÔ∏è –ù–ï–î–ê–í–ù–ï–ï –§–û–¢–û: {photo_age.days} –¥–Ω–µ–π (+10 –±–∞–ª–ª–æ–≤)")
                            else:
                                logger.info(f"   ‚úÖ –°–¢–ê–†–û–ï –§–û–¢–û: {photo_age.days} –¥–Ω–µ–π (0 –±–∞–ª–ª–æ–≤)")
                        else:
                            logger.info(f"   ‚úÖ –ï–°–¢–¨ –§–û–¢–û –ü–†–û–§–ò–õ–Ø (–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞) (0 –±–∞–ª–ª–æ–≤)")
                            
                except Exception as photo_error:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {photo_error}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±–∞–ª–ª
                    analysis["risk_score"] += 3
                    logger.info(f"   ‚ÑπÔ∏è –ù–ï –£–î–ê–õ–û–°–¨ –ü–†–û–í–ï–†–ò–¢–¨ –§–û–¢–û (+3 –±–∞–ª–ª–∞)")
                    
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ API, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
                analysis["risk_score"] += 10
                logger.info(f"   ‚ÑπÔ∏è –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –î–ê–ù–ù–´–ï –ß–ï–†–ï–ó API (+10 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
        if not user_data.get("username"):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username")
            analysis["risk_score"] += 15
            logger.warning(f"   ‚ö†Ô∏è –ù–ï–¢ USERNAME (+15 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ï–°–¢–¨ USERNAME (0 –±–∞–ª–ª–æ–≤)")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º username –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            username = user_data.get("username", "").lower()
            suspicious_patterns = [
                "bot", "admin", "support", "help", "service", "official",
                "test", "demo", "sample", "example", "temp", "tmp"
            ]
            
            for pattern in suspicious_patterns:
                if pattern in username:
                    analysis["is_suspicious"] = True
                    analysis["reasons"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π username —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
                    analysis["risk_score"] += 10
                    logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô USERNAME: —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}' (+10 –±–∞–ª–ª–æ–≤)")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if not user_data.get("first_name"):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è")
            analysis["risk_score"] += 20
            logger.warning(f"   ‚ö†Ô∏è –ù–ï–¢ –ò–ú–ï–ù–ò (+20 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ï–°–¢–¨ –ò–ú–Ø (0 –±–∞–ª–ª–æ–≤)")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            first_name = user_data.get("first_name", "").lower()
            suspicious_names = [
                "bot", "admin", "support", "help", "service", "official",
                "test", "demo", "sample", "example", "temp", "tmp",
                "user", "member", "guest", "anonymous"
            ]
            
            for pattern in suspicious_names:
                if pattern in first_name:
                    analysis["is_suspicious"] = True
                    analysis["reasons"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}'")
                    analysis["risk_score"] += 10
                    logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –ò–ú–Ø: —Å–æ–¥–µ—Ä–∂–∏—Ç '{pattern}' (+10 –±–∞–ª–ª–æ–≤)")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        first_name = user_data.get("first_name", "").lower()
        suspicious_names = [
            "user", "test", "bot", "admin", "support", "help",
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "—Ç–µ—Å—Ç", "–±–æ—Ç", "–∞–¥–º–∏–Ω", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ]
        
        if any(name in first_name for name in suspicious_names):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è")
            analysis["risk_score"] += 20
            logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï –ò–ú–Ø: '{first_name}' (+20 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û–ï –ò–ú–Ø: '{first_name}' (0 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ username
        username = user_data.get("username", "").lower()
        if username:
            # Username —Å —á–∏—Å–ª–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ (—á–∞—Å—Ç–æ –±–æ—Ç—ã)
            if username[-3:].isdigit() or username[-4:].isdigit():
                analysis["risk_score"] += 10
                logger.warning(f"   ‚ö†Ô∏è USERNAME –° –ß–ò–°–õ–ê–ú–ò: '{username}' (+10 –±–∞–ª–ª–æ–≤)")
            
            # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π username
            if len(username) < 3:
                analysis["risk_score"] += 15
                logger.warning(f"   ‚ö†Ô∏è –ö–û–†–û–¢–ö–ò–ô USERNAME: '{username}' (+15 –±–∞–ª–ª–æ–≤)")
            
            # Username —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            bot_keywords = ["bot", "user", "test", "auto", "spam"]
            if any(keyword in username for keyword in bot_keywords):
                analysis["is_suspicious"] = True
                analysis["reasons"].append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π username")
                analysis["risk_score"] += 25
                logger.warning(f"   ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô USERNAME: '{username}' (+25 –±–∞–ª–ª–æ–≤)")
            else:
                logger.info(f"   ‚úÖ –ù–û–†–ú–ê–õ–¨–ù–´–ô USERNAME: '{username}' (0 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        language_code = user_data.get("language_code", "")
        if language_code and language_code not in ["ru", "en", "uk", "be"]:
            analysis["risk_score"] += 5
            logger.warning(f"   ‚ö†Ô∏è –ù–ï–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –Ø–ó–´–ö: '{language_code}' (+5 –±–∞–ª–ª–æ–≤)")
        else:
            logger.info(f"   ‚úÖ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –Ø–ó–´–ö: '{language_code}' (0 –±–∞–ª–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –±–æ—Ç–∞
        if user_data.get("is_bot", False):
            analysis["is_suspicious"] = True
            analysis["reasons"].append("–ê–∫–∫–∞—É–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –±–æ—Ç")
            analysis["risk_score"] += 50
            logger.error(f"   üö® –ê–ö–ö–ê–£–ù–¢ –ü–û–ú–ï–ß–ï–ù –ö–ê–ö –ë–û–¢ (+50 –±–∞–ª–ª–æ–≤)")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if analysis["risk_score"] >= 40:
            analysis["is_suspicious"] = True
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"   üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        logger.info(f"      üéØ –û–±—â–∏–π –±–∞–ª–ª —Ä–∏—Å–∫–∞: {analysis['risk_score']}/100")
        logger.info(f"      üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {analysis['is_suspicious']}")
        if analysis["reasons"]:
            logger.info(f"      üìù –ü—Ä–∏—á–∏–Ω—ã: {', '.join(analysis['reasons'])}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    return analysis


async def get_enhanced_captcha_decision(user_id: int, user_data: dict, captcha_answer: str, user_answer: str, bot: Bot = None, chat_id: int = None) -> Dict[str, Any]:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–ø—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    decision = {
        "approved": False,
        "reason": "",
        "risk_factors": [],
        "total_risk_score": 0
    }
    
    print(f"üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"   üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_answer}'")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{captcha_answer}'")
    
    logger.info(f"üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"   üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_answer}'")
    logger.info(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{captcha_answer}'")
    
    try:
        # 0. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–°–ï–ì–î–ê (–¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ)
        profile_analysis = await analyze_user_profile(user_data, bot)
        if profile_analysis["is_suspicious"]:
            decision["risk_factors"].extend(profile_analysis["reasons"])
            decision["total_risk_score"] += profile_analysis["risk_score"]
        
        # 0.5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å bot –∏ chat_id)
        if bot and chat_id:
            messages_analysis = await analyze_user_messages(user_id, bot, chat_id)
            if messages_analysis["is_suspicious"]:
                decision["risk_factors"].extend(messages_analysis["reasons"])
                decision["total_risk_score"] += messages_analysis["risk_score"]
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É
        user_answer_clean = user_answer.upper().strip()
        captcha_answer_clean = captcha_answer.upper().strip()
        
        print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '{user_answer}' -> '{user_answer_clean}'")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: '{captcha_answer}' -> '{captcha_answer_clean}'")
        print(f"   –°–æ–≤–ø–∞–¥–∞—é—Ç: {user_answer_clean == captcha_answer_clean}")
        
        if user_answer_clean != captcha_answer_clean:
            decision["reason"] = "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É"
            return decision
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—É–±–∏—Ä–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç)
        behavior_analysis = await analyze_behavior_patterns(user_id)
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ - –ø—É—Å—Ç—å –ø—ã—Ç–∞–µ—Ç—Å—è
        logger.info(f"   ‚ÑπÔ∏è –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–©–ï–ù (0 –±–∞–ª–ª–æ–≤)")
        
        # 3. –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ
        
        # 4. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
        logger.info(f"   üéØ –ò–¢–û–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï:")
        logger.info(f"      üìä –û–±—â–∏–π –±–∞–ª–ª —Ä–∏—Å–∫–∞: {decision['total_risk_score']}/100")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
        # 80+ –±–∞–ª–ª–æ–≤ = –∞–≤—Ç–æ–º—É—Ç (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
        # 50-79 –±–∞–ª–ª–æ–≤ = –∞–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–∞ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫) 
        # 30-49 –±–∞–ª–ª–æ–≤ = –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫)
        # 0-29 –±–∞–ª–ª–æ–≤ = —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)
        
        if decision["total_risk_score"] >= 80:
            decision["reason"] = f"–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–∫–∞–º–º–µ—Ä–∞ (–æ—Ü–µ–Ω–∫–∞: {decision['total_risk_score']}/100) - –±—É–¥–µ—Ç –∑–∞–º—å—é—á–µ–Ω"
            decision["approved"] = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥, –Ω–æ –±—É–¥–µ–º –º—É—Ç–∏—Ç—å
            decision["should_auto_mute"] = True  # –§–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞
            logger.warning(f"   üö® –†–ï–®–ï–ù–ò–ï: –†–ê–ó–†–ï–®–ï–ù –° –ê–í–¢–û–ú–£–¢–û–ú (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)")
            logger.warning(f"   üìù –ü—Ä–∏—á–∏–Ω—ã: {', '.join(decision['risk_factors'])}")
        elif decision["total_risk_score"] >= 50:
            decision["reason"] = f"–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ —Å–∫–∞–º–º–µ—Ä–∞ (–æ—Ü–µ–Ω–∫–∞: {decision['total_risk_score']}/100) - –±—É–¥–µ—Ç –∑–∞–º—å—é—á–µ–Ω"
            decision["approved"] = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥, –Ω–æ –±—É–¥–µ–º –º—É—Ç–∏—Ç—å
            decision["should_auto_mute"] = True  # –§–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º—É—Ç–∞
            logger.warning(f"   ‚ö†Ô∏è –†–ï–®–ï–ù–ò–ï: –†–ê–ó–†–ï–®–ï–ù –° –ê–í–¢–û–ú–£–¢–û–ú (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)")
            logger.warning(f"   üìù –ü—Ä–∏—á–∏–Ω—ã: {', '.join(decision['risk_factors'])}")
        elif decision["total_risk_score"] >= 30:
            decision["reason"] = f"–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ (–æ—Ü–µ–Ω–∫–∞: {decision['total_risk_score']}/100), —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            logger.warning(f"   ‚ö†Ô∏è –†–ï–®–ï–ù–ò–ï: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫)")
            logger.warning(f"   üìù –ü—Ä–∏—á–∏–Ω—ã: {', '.join(decision['risk_factors'])}")
        else:
            decision["approved"] = True
            decision["reason"] = "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            logger.info(f"   ‚úÖ –†–ï–®–ï–ù–ò–ï: –†–ê–ó–†–ï–®–ï–ù (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)")
            if decision['risk_factors']:
                logger.info(f"   üìù –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {', '.join(decision['risk_factors'])}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞–ø—á–µ: {e}")
        decision["reason"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ø—á–∏"
    
    return decision


async def format_user_log_info(bot: Bot, user_id: int, chat_id: int = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"id{user_id}"
        try:
            user = await bot.get_chat(user_id)
            if user.username:
                user_info = f"@{user.username} [{user_id}]"
            elif user.first_name:
                user_info = f"{user.first_name} [{user_id}]"
        except:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if chat_id:
            try:
                chat = await bot.get_chat(chat_id)
                if chat.username:
                    chat_info = f"@{chat.username} [{chat_id}]"
                else:
                    chat_info = f"{chat.title} [{chat_id}]"
                return f"{user_info} –≤ –≥—Ä—É–ø–ø–µ {chat_info}"
            except:
                return f"{user_info} –≤ –≥—Ä—É–ø–ø–µ {chat_id}"
        
        return user_info
    except:
        return f"id{user_id}"


async def save_scam_level_to_db(session: AsyncSession, user_id: int, chat_id: int, risk_score: int, risk_factors: list, user_data: dict, bot: Bot = None) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —à–∫–∞–ª—É —Ä–∏—Å–∫–∞ 0-100 –≤–º–µ—Å—Ç–æ —É—Ä–æ–≤–Ω–µ–π 0-5
        scam_level = risk_score  # –¢–µ–ø–µ—Ä—å scam_level = risk_score (0-100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        result = await session.execute(
            select(ScammerTracker).where(
                ScammerTracker.user_id == user_id,
                ScammerTracker.chat_id == chat_id
            )
        )
        existing_record = result.scalar_one_or_none()
        
        if existing_record:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing_record.scammer_level = scam_level
            existing_record.violation_count += 1
            existing_record.last_violation_at = datetime.utcnow()
            existing_record.notes = f"–û–±–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞: {risk_score}/100. –§–∞–∫—Ç–æ—Ä—ã: {', '.join(risk_factors)}"
            existing_record.updated_at = datetime.utcnow()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ –¥–ª—è –ª–æ–≥–∞
            user_log_info = await format_user_log_info(bot, user_id, chat_id) if bot else f"id{user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}"
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –¥–ª—è {user_log_info}: {scam_level}/100 (–±–∞–ª–ª: {risk_score})")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_record = ScammerTracker(
                user_id=user_id,
                chat_id=chat_id,
                username=user_data.get("username"),
                first_name=user_data.get("first_name"),
                last_name=user_data.get("last_name"),
                violation_type="captcha_risk_assessment",
                violation_count=1,
                is_scammer=scam_level >= 50,  # –°—á–∏—Ç–∞–µ–º —Å–∫–∞–º–º–µ—Ä–æ–º –ø—Ä–∏ 50+ –±–∞–ª–ª–∞—Ö —Ä–∏—Å–∫–∞
                scammer_level=scam_level,
                first_violation_at=datetime.utcnow(),
                last_violation_at=datetime.utcnow(),
                notes=f"–ü–µ—Ä–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {risk_score}/100. –§–∞–∫—Ç–æ—Ä—ã: {', '.join(risk_factors)}"
            )
            session.add(new_record)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ –¥–ª—è –ª–æ–≥–∞
            user_log_info = await format_user_log_info(bot, user_id, chat_id) if bot else f"id{user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}"
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–∫–∞–º–µ –¥–ª—è {user_log_info}: {scam_level}/100 (–±–∞–ª–ª: {risk_score})")
        
        await session.commit()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞ –≤ –ë–î: {e}")
        await session.rollback()


async def get_user_scam_level(session: AsyncSession, user_id: int, chat_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        result = await session.execute(
            select(ScammerTracker.scammer_level).where(
                ScammerTracker.user_id == user_id,
                ScammerTracker.chat_id == chat_id
            )
        )
        scam_level = result.scalar_one_or_none()
        return scam_level if scam_level is not None else 0
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞ –∏–∑ –ë–î: {e}")
        return 0


async def reset_user_scam_level(session: AsyncSession, user_id: int, chat_id: int = None) -> bool:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if chat_id:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            result = await session.execute(
                select(ScammerTracker).where(
                    ScammerTracker.user_id == user_id,
                    ScammerTracker.chat_id == chat_id
                )
            )
            record = result.scalar_one_or_none()
            if record:
                record.scammer_level = 0
                record.is_scammer = False
                record.notes = f"–£—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {datetime.utcnow()}"
                record.updated_at = datetime.utcnow()
                await session.commit()
                logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
                return True
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            result = await session.execute(
                select(ScammerTracker).where(ScammerTracker.user_id == user_id)
            )
            records = result.scalars().all()
            for record in records:
                record.scammer_level = 0
                record.is_scammer = False
                record.notes = f"–£—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {datetime.utcnow()}"
                record.updated_at = datetime.utcnow()
            await session.commit()
            logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö")
            return True
        
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —É—Ä–æ–≤–Ω—è —Å–∫–∞–º–∞: {e}")
        await session.rollback()
        return False
