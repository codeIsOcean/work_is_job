# services/auto_mute_scammers_logic.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot
from aiogram.types import ChatMemberUpdated, ChatPermissions
from aiogram.enums import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert

from bot.services.redis_conn import redis
from bot.database.models import ChatSettings, ScammerTracker
from bot.database.session import get_session
from bot.utils.logger import send_formatted_log

logger = logging.getLogger(__name__)


async def get_auto_mute_scammers_status(chat_id: int, session: AsyncSession = None) -> bool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Redis, –∑–∞—Ç–µ–º –ë–î
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        auto_mute_enabled = await redis.get(f"group:{chat_id}:auto_mute_scammers")
        logger.info(f"üîç [AUTO_MUTE_STATUS] Redis check –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {auto_mute_enabled}")
        
        if auto_mute_enabled is not None:
            result = auto_mute_enabled == "1"
            logger.info(f"üîç [AUTO_MUTE_STATUS] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {result}")
            return result
        
        # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        if session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings and hasattr(settings, 'auto_mute_scammers'):
                auto_mute_enabled = "1" if settings.auto_mute_scammers else "0"
                # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                await redis.set(f"group:{chat_id}:auto_mute_scammers", auto_mute_enabled)
                return settings.auto_mute_scammers
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
                await redis.set(f"group:{chat_id}:auto_mute_scammers", "1")
                return True
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            async with get_session() as new_session:
                result = await new_session.execute(
                    select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                )
                settings = result.scalar_one_or_none()
                
                if settings and hasattr(settings, 'auto_mute_scammers'):
                    auto_mute_enabled = "1" if settings.auto_mute_scammers else "0"
                    # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                    await redis.set(f"group:{chat_id}:auto_mute_scammers", auto_mute_enabled)
                    return settings.auto_mute_scammers
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
                    await redis.set(f"group:{chat_id}:auto_mute_scammers", "1")
                    return True
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ


async def set_auto_mute_scammers_status(chat_id: int, enabled: bool, session: AsyncSession = None) -> bool:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis –∏ –ë–î
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        redis_value = "1" if enabled else "0"
        await redis.set(f"group:{chat_id}:auto_mute_scammers", redis_value)
        logger.info(f"üîç [AUTO_MUTE_SET] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {redis_value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings:
                await session.execute(
                    update(ChatSettings)
                    .where(ChatSettings.chat_id == chat_id)
                    .values(auto_mute_scammers=enabled)
                )
            else:
                await session.execute(
                    insert(ChatSettings).values(
                        chat_id=chat_id,
                        auto_mute_scammers=enabled,
                        enable_photo_filter=False,
                        admins_bypass_photo_filter=False,
                        photo_filter_mute_minutes=60,
                        mute_new_members=False
                    )
                )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            async with get_session() as new_session:
                result = await new_session.execute(
                    select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                )
                settings = result.scalar_one_or_none()
                
                if settings:
                    await new_session.execute(
                        update(ChatSettings)
                        .where(ChatSettings.chat_id == chat_id)
                        .values(auto_mute_scammers=enabled)
                    )
                else:
                    await new_session.execute(
                        insert(ChatSettings).values(
                            chat_id=chat_id,
                            auto_mute_scammers=enabled,
                            enable_photo_filter=False,
                            admins_bypass_photo_filter=False,
                            photo_filter_mute_minutes=60,
                            mute_new_members=False
                        )
                    )
                await new_session.commit()
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False


async def auto_mute_scammer_on_join(bot: Bot, event: ChatMemberUpdated) -> bool:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º—É—Ç–∏—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É
    """
    try:
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        chat_id = event.chat.id
        user = event.new_chat_member.user
        
        logger.info(f"üîç [AUTO_MUTE_DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ chat_member: user=@{user.username or user.first_name or user.id} [{user.id}], chat={chat_id}, old={old_status} -> new={new_status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        if old_status in ("left", "kicked") and new_status == "member":
            logger.info(f"üîç [AUTO_MUTE_DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name or user.id} [{user.id}] —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ {old_status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            auto_mute_enabled = await get_auto_mute_scammers_status(chat_id)
            logger.info(f"üîç [AUTO_MUTE_DEBUG] –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {auto_mute_enabled}")
            
            if not auto_mute_enabled:
                logger.info(f"üîç [AUTO_MUTE_DEBUG] –ê–≤—Ç–æ–º—É—Ç —Å–∫–∞–º–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä—É—á–Ω–æ–π –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            from bot.services.new_member_requested_to_join_mute_logic import get_mute_new_members_status
            manual_mute_enabled = await get_mute_new_members_status(chat_id)
            logger.info(f"üîç [AUTO_MUTE_DEBUG] –°—Ç–∞—Ç—É—Å —Ä—É—á–Ω–æ–≥–æ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {manual_mute_enabled}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            captcha_passed = await redis.get(f"captcha_passed:{user.id}:{chat_id}")
            logger.info(f"üîç [AUTO_MUTE_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.first_name or user.id} [{user.id}]: {captcha_passed}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä—É—á–Ω–æ–≥–æ –º—É—Ç–∞
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–∫–∞–º–º–µ—Ä (—Å–≤–µ–∂–∏–π –∞–∫–∫–∞—É–Ω—Ç/–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ) - –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –†—É—á–Ω–æ–π –º—É—Ç –∏ –∞–≤—Ç–æ–º—É—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ - —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (‚â§30 –¥–Ω–µ–π) –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            from bot.services.account_age_estimator import account_age_estimator
            age_info = account_age_estimator.get_detailed_age_info(user.id)
            age_days = age_info["age_days"]
            age_risk_score = age_info["risk_score"]
            
            logger.info(f"üîç [AUTO_MUTE_DEBUG] –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ @{user.username or user.first_name or user.id} [{user.id}]: {age_days} –¥–Ω–µ–π, —Ä–∏—Å–∫: {age_risk_score}/100")
            
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–≤–µ–∂–∏–π (‚â§30 –¥–Ω–µ–π) - –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if age_days <= 30:
                logger.info(f"üîç [AUTO_MUTE_DEBUG] –°–≤–µ–∂–∏–π –∞–∫–∫–∞—É–Ω—Ç @{user.username or user.first_name or user.id} [{user.id}] ({age_days} –¥–Ω–µ–π) - –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            else:
                logger.info(f"üîç [AUTO_MUTE_DEBUG] –°—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç @{user.username or user.first_name or user.id} [{user.id}] ({age_days} –¥–Ω–µ–π) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –≤ –ë–î")
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∫–∞–º–∞ –≤ –ë–î
                async with get_session() as session:
                    result = await session.execute(
                        select(ScammerTracker.scammer_level).where(
                            ScammerTracker.user_id == user.id,
                            ScammerTracker.chat_id == chat_id
                        )
                    )
                    scam_level = result.scalar_one_or_none()
                    
                    if scam_level is None or scam_level < 50:  # 50+ –±–∞–ª–ª–æ–≤ = —Å–∫–∞–º–º–µ—Ä
                        logger.info(f"üîç [AUTO_MUTE_DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name or user.id} [{user.id}] –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∞–º–º–µ—Ä–æ–º (—É—Ä–æ–≤–µ–Ω—å: {scam_level}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return False
            
            logger.info(f"üîá [AUTO_MUTE_DEBUG] –ú—É—Ç–∏–º —Å–∫–∞–º–º–µ—Ä–∞ @{user.username or user.first_name or user.id} [{user.id}] –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=datetime.now() + timedelta(days=366 * 10)  # 10 –ª–µ—Ç
            )
            
            await asyncio.sleep(1)
            logger.info(f"üîá –°–∫–∞–º–º–µ—Ä @{user.username or user.first_name or user.id} [{user.id}] –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω")
            
            # –õ–û–ì–ò–†–£–ï–ú –ê–í–¢–û–ú–£–¢ –°–ö–ê–ú–ú–ï–†–ê —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∂—É—Ä–Ω–∞–ª–∞
            try:
                from bot.services.bot_activity_journal.bot_activity_journal_logic import log_auto_mute_scammer
                from bot.database.session import get_session
                async with get_session() as db_session:
                    await log_auto_mute_scammer(
                        bot=bot,
                        user=user,
                        chat=event.chat,
                        scammer_level=scam_level or 0,
                        reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç (–≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {age_days} –¥–Ω–µ–π)",
                        session=db_session
                    )
                logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥ –æ–± –∞–≤—Ç–æ–º—É—Ç–µ —Å–∫–∞–º–º–µ—Ä–∞ @{user.username or user.first_name or user.id} [{user.id}] –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
            except Exception as log_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –æ–± –∞–≤—Ç–æ–º—É—Ç–µ: {log_error}")
            
            return True
        else:
            logger.debug(f"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. old={old_status}, new={new_status}")
            return False
            
    except Exception as e:
        logger.error(f"AUTO_MUTE_ERROR: {str(e)}")
        return False


async def create_auto_mute_settings_keyboard(chat_id: int, session: AsyncSession = None) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤
    """
    auto_mute_enabled = await get_auto_mute_scammers_status(chat_id, session)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å –≥–∞–ª–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    enable_text = "‚úì –í–∫–ª—é—á–∏—Ç—å" if auto_mute_enabled else "–í–∫–ª—é—á–∏—Ç—å"
    disable_text = "‚úì –í—ã–∫–ª—é—á–∏—Ç—å" if not auto_mute_enabled else "–í—ã–∫–ª—é—á–∏—Ç—å"
    
    keyboard_data = {
        "buttons": [
            [
                {"text": enable_text, "callback_data": f"auto_mute_settings:enable:{chat_id}"},
                {"text": disable_text, "callback_data": f"auto_mute_settings:disable:{chat_id}"}
            ],
            [{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back_to_groups"}]
        ],
        "status": auto_mute_enabled  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    
    return keyboard_data


def get_auto_mute_settings_text(status: bool = True) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤
    """
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if status else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    return (
        f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º—É—Ç–∞ —Å–∫–∞–º–º–µ—Ä–æ–≤:\n\n"
        f"‚Ä¢ –°–∫–∞–º–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É—Ç –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏\n"
        f"‚Ä¢ –ú—É—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 10 –ª–µ—Ç\n"
        f"‚Ä¢ –°–∫–∞–º–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤."
    )
