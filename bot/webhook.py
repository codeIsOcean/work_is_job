"""
Webhook —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
import ssl
from aiohttp import web, web_request
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.session.aiohttp import AiohttpSession

from bot.config import (
    BOT_TOKEN, WEBHOOK_URL, WEBHOOK_PATH, WEBHOOK_PORT,
    SSL_CERT_PATH, SSL_KEY_PATH, REDIS_URL, USE_WEBHOOK
)
from bot.database.session import engine, async_session
from bot.database.models import Base
from bot.middleware.db_session import DbSessionMiddleware
from bot.handlers import handlers_router, create_fresh_handlers_router
from bot.services.redis_conn import test_connection

logger = logging.getLogger(__name__)


async def create_app(bot: Bot = None, dp: Dispatcher = None) -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook"""
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    try:
        await test_connection()
        storage = RedisStorage.from_url(REDIS_URL)
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è webhook")
    except Exception as e:
        from aiogram.fsm.storage.memory import MemoryStorage
        storage = MemoryStorage()
        logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è webhook: {e}")
        logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage –¥–ª—è webhook")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ bot –∏ dp, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    if bot is None or dp is None:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        session = AiohttpSession(timeout=60.0)
        bot = Bot(token=BOT_TOKEN, session=session)
        dp = Dispatcher(storage=storage)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π dispatcher)
        dp.update.middleware(DbSessionMiddleware(async_session))
    else:
        # Dispatcher –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ bot.py - middleware —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º dispatcher –∏–∑ bot.py —Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ middleware")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    # –ï—Å–ª–∏ bot –∏ dp –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑ bot.py - handlers —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π dispatcher - –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å handlers
    if bot is not None and dp is not None:
        # Dispatcher –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ bot.py - handlers —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º dispatcher —Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ handlers –∏–∑ bot.py")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π dispatcher - –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å handlers
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ router —É–∂–µ –∫ –¥—Ä—É–≥–æ–º—É dispatcher
            if hasattr(handlers_router, '_parent_router') and handlers_router._parent_router is not None:
                # Router —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥—Ä—É–≥–æ–º—É dispatcher - –∏—Å–ø–æ–ª—å–∑—É–µ–º create_fresh_handlers_router
                from bot.handlers import create_fresh_handlers_router
                fresh_router = create_fresh_handlers_router()
                dp.include_router(fresh_router)
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π router –¥–ª—è webhook (router –±—ã–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)")
            else:
                dp.include_router(handlers_router)
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω router –¥–ª—è webhook")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è router: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ router (—Ç–æ–ª—å–∫–æ middleware)
            pass

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_application(app, dp, bot=bot)

    # Health check endpoint
    async def health_check(request):
        return web.json_response({"status": "ok", "service": "telegram_bot"})

    app.router.add_get("/health", health_check)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    if USE_WEBHOOK:
        await setup_webhook(bot)

    return app


async def setup_webhook(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            secret_token=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            allowed_updates=["message", "callback_query", "chat_member", "my_chat_member", "chat_join_request"]
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        raise


async def run_webhook(bot: Bot = None, dp: Dispatcher = None):
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    if not USE_WEBHOOK:
        logger.info("‚ÑπÔ∏è Webhook –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
        return

    app = await create_app(bot=bot, dp=dp)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
    ssl_context = None
    if SSL_CERT_PATH and SSL_KEY_PATH:
        try:
            ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
            ssl_context.load_cert_chain(SSL_CERT_PATH, SSL_KEY_PATH)
            logger.info("‚úÖ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL: {e}")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(
        runner, 
        host='0.0.0.0', 
        port=WEBHOOK_PORT,
        ssl_context=ssl_context
    )
    
    await site.start()
    logger.info(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT}")
    
    try:
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await runner.cleanup()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(run_webhook())
